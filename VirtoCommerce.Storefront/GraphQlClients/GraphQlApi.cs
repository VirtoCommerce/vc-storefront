// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
#if!GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
#endif

namespace VirtoCommerce.Storefront.GraphQlClients
{
    #region base classes
    public struct FieldMetadata
    {
        public string Name { get; set; }
        public string DefaultAlias { get; set; }
        public bool IsComplex { get; set; }
        public Type QueryBuilderType { get; set; }
    }

    public enum Formatting
    {
        None,
        Indented
    }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
    public class QueryBuilderParameterConverter<T> : JsonConverter
    {
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Null:
                    return null;

                default:
                    return (QueryBuilderParameter<T>)(T)serializer.Deserialize(reader, typeof(T));
            }
        }

        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            if (value == null)
                writer.WriteNull();
            else
                serializer.Serialize(writer, ((QueryBuilderParameter<T>)value).Value, typeof(T));
        }

        public override bool CanConvert(Type objectType) => objectType.IsSubclassOf(typeof(QueryBuilderParameter));
    }
#endif

    internal static class GraphQlQueryHelper
    {
        private static readonly Regex RegexWhiteSpace = new Regex(@"\s", RegexOptions.Compiled);
        private static readonly Regex RegexGraphQlIdentifier = new Regex(@"^[_A-Za-z][_0-9A-Za-z]*$", RegexOptions.Compiled);

        public static string GetIndentation(int level, byte indentationSize)
        {
            return new String(' ', level * indentationSize);
        }

        public static string BuildArgumentValue(object value, string formatMask, Formatting formatting, int level, byte indentationSize)
        {
            if (value is null)
                return "null";

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
            if (value is JValue jValue)
            {
                switch (jValue.Type)
                {
                    case JTokenType.Null:
                        return "null";
                    case JTokenType.Integer:
                    case JTokenType.Float:
                    case JTokenType.Boolean:
                        return BuildArgumentValue(jValue.Value, null, formatting, level, indentationSize);
                    default:
                        return "\"" + jValue.Value + "\"";
                }
            }

            if (value is JProperty jProperty)
            {
                if (RegexWhiteSpace.IsMatch(jProperty.Name))
                    throw new ArgumentException($"JSON object keys used as GraphQL arguments must not contain whitespace; key: {jProperty.Name}");

                return $"{jProperty.Name}:{(formatting == Formatting.Indented ? " " : null)}{BuildArgumentValue(jProperty.Value, null, formatting, level, indentationSize)}";
            }

            if (value is JObject jObject)
                return BuildEnumerableArgument(jObject, null, formatting, level + 1, indentationSize, '{', '}');
#endif

            var enumerable = value as IEnumerable;
            if (!String.IsNullOrEmpty(formatMask) && enumerable == null)
                return
                    value is IFormattable formattable
                        ? "\"" + formattable.ToString(formatMask, CultureInfo.InvariantCulture) + "\""
                        : throw new ArgumentException($"Value must implement {nameof(IFormattable)} interface to use a format mask. ", nameof(value));

            if (value is Enum @enum)
                return ConvertEnumToString(@enum);

            if (value is bool @bool)
                return @bool ? "true" : "false";

            if (value is DateTime dateTime)
                return "\"" + dateTime.ToString("O") + "\"";

            if (value is DateTimeOffset dateTimeOffset)
                return "\"" + dateTimeOffset.ToString("O") + "\"";

            if (value is IGraphQlInputObject inputObject)
                return BuildInputObject(inputObject, formatting, level + 2, indentationSize);

            if (value is String || value is Guid)
                return "\"" + value + "\"";

            if (enumerable != null)
                return BuildEnumerableArgument(enumerable, formatMask, formatting, level, indentationSize, '[', ']');

            if (value is short || value is ushort || value is byte || value is int || value is uint || value is long || value is ulong || value is float || value is double || value is decimal)
                return Convert.ToString(value, CultureInfo.InvariantCulture);

            var argumentValue = Convert.ToString(value, CultureInfo.InvariantCulture);
            return "\"" + argumentValue + "\"";
        }

        private static string BuildEnumerableArgument(IEnumerable enumerable, string formatMask, Formatting formatting, int level, byte indentationSize, char openingSymbol, char closingSymbol)
        {
            var builder = new StringBuilder();
            builder.Append(openingSymbol);
            var delimiter = String.Empty;
            foreach (var item in enumerable)
            {
                builder.Append(delimiter);

                if (formatting == Formatting.Indented)
                {
                    builder.AppendLine();
                    builder.Append(GetIndentation(level + 1, indentationSize));
                }

                builder.Append(BuildArgumentValue(item, formatMask, formatting, level, indentationSize));
                delimiter = ",";
            }

            builder.Append(closingSymbol);
            return builder.ToString();
        }

        public static string BuildInputObject(IGraphQlInputObject inputObject, Formatting formatting, int level, byte indentationSize)
        {
            var builder = new StringBuilder();
            builder.Append("{");

            var isIndentedFormatting = formatting == Formatting.Indented;
            string valueSeparator;
            if (isIndentedFormatting)
            {
                builder.AppendLine();
                valueSeparator = ": ";
            }
            else
                valueSeparator = ":";

            var separator = String.Empty;
            foreach (var propertyValue in inputObject.GetPropertyValues())
            {
                var queryBuilderParameter = propertyValue.Value as QueryBuilderParameter;
                var value =
                    queryBuilderParameter?.Name != null
                        ? "$" + queryBuilderParameter.Name
                        : BuildArgumentValue(queryBuilderParameter?.Value ?? propertyValue.Value, propertyValue.FormatMask, formatting, level, indentationSize);

                builder.Append(isIndentedFormatting ? GetIndentation(level, indentationSize) : separator);
                builder.Append(propertyValue.Name);
                builder.Append(valueSeparator);
                builder.Append(value);

                separator = ",";

                if (isIndentedFormatting)
                    builder.AppendLine();
            }

            if (isIndentedFormatting)
                builder.Append(GetIndentation(level - 1, indentationSize));

            builder.Append("}");

            return builder.ToString();
        }

        public static string BuildDirective(GraphQlDirective directive, Formatting formatting, int level, byte indentationSize)
        {
            if (directive == null)
                return String.Empty;

            var isIndentedFormatting = formatting == Formatting.Indented;
            var indentationSpace = isIndentedFormatting ? " " : String.Empty;
            var builder = new StringBuilder();
            builder.Append(indentationSpace);
            builder.Append("@");
            builder.Append(directive.Name);
            builder.Append("(");

            string separator = null;
            foreach (var kvp in directive.Arguments)
            {
                var argumentName = kvp.Key;
                var argument = kvp.Value;

                builder.Append(separator);
                builder.Append(argumentName);
                builder.Append(":");
                builder.Append(indentationSpace);

                if (argument.Name == null)
                    builder.Append(BuildArgumentValue(argument.Value, null, formatting, level, indentationSize));
                else
                {
                    builder.Append("$");
                    builder.Append(argument.Name);
                }

                separator = isIndentedFormatting ? ", " : ",";
            }

            builder.Append(")");
            return builder.ToString();
        }

        public static void ValidateGraphQlIdentifier(string name, string identifier)
        {
            if (identifier != null && !RegexGraphQlIdentifier.IsMatch(identifier))
                throw new ArgumentException("value must match [_A-Za-z][_0-9A-Za-z]*", name);
        }

        private static string ConvertEnumToString(Enum @enum)
        {
            var enumMember = @enum.GetType().GetTypeInfo().GetField(@enum.ToString());
            if (enumMember == null)
                throw new InvalidOperationException("enum member resolution failed");

            var enumMemberAttribute = (EnumMemberAttribute)enumMember.GetCustomAttribute(typeof(EnumMemberAttribute));

            return enumMemberAttribute == null
                ? @enum.ToString()
                : enumMemberAttribute.Value;
        }
    }

    internal struct InputPropertyInfo
    {
        public string Name { get; set; }
        public object Value { get; set; }
        public string FormatMask { get; set; }
    }

    internal interface IGraphQlInputObject
    {
        IEnumerable<InputPropertyInfo> GetPropertyValues();
    }

    public interface IGraphQlQueryBuilder
    {
        void Clear();
        void IncludeAllFields();
        string Build(Formatting formatting = Formatting.None, byte indentationSize = 2);
    }

    public struct QueryBuilderArgumentInfo
    {
        public string ArgumentName { get; set; }
        public QueryBuilderParameter ArgumentValue { get; set; }
        public string FormatMask { get; set; }
    }

    public abstract class QueryBuilderParameter
    {
        private string _name;

        internal string GraphQlTypeName { get; }
        internal object Value { get; set; }

        public string Name
        {
            get => _name;
            set
            {
                GraphQlQueryHelper.ValidateGraphQlIdentifier(nameof(Name), value);
                _name = value;
            }
        }

        protected QueryBuilderParameter(string name, string graphQlTypeName, object value)
        {
            Name = name?.Trim();
            GraphQlTypeName = graphQlTypeName?.Replace(" ", null).Replace("\t", null).Replace("\n", null).Replace("\r", null);
            Value = value;
        }

        protected QueryBuilderParameter(object value) => Value = value;
    }

    public class QueryBuilderParameter<T> : QueryBuilderParameter
    {
        public new T Value
        {
            get => (T)base.Value;
            set => base.Value = value;
        }

        protected QueryBuilderParameter(string name, string graphQlTypeName, T value) : base(name, graphQlTypeName, value)
        {
        }

        private QueryBuilderParameter(T value) : base(value)
        {
        }

        public static implicit operator QueryBuilderParameter<T>(T value) => new QueryBuilderParameter<T>(value);

        public static implicit operator T(QueryBuilderParameter<T> parameter) => parameter.Value;
    }

    public class GraphQlQueryParameter<T> : QueryBuilderParameter<T>
    {
        private string _formatMask;

        public string FormatMask
        {
            get => _formatMask;
            set => _formatMask =
                typeof(IFormattable).GetTypeInfo().IsAssignableFrom(typeof(T))
                    ? value
                    : throw new InvalidOperationException($"Value must be of {nameof(IFormattable)} type. ");
        }

        public GraphQlQueryParameter(string name, string graphQlTypeName, T value) : base(name, graphQlTypeName, value)
        {
        }
    }

    public abstract class GraphQlDirective
    {
        private readonly Dictionary<string, QueryBuilderParameter> _arguments = new Dictionary<string, QueryBuilderParameter>();

        internal IEnumerable<KeyValuePair<string, QueryBuilderParameter>> Arguments => _arguments;

        public string Name { get; }

        protected GraphQlDirective(string name)
        {
            GraphQlQueryHelper.ValidateGraphQlIdentifier(nameof(name), name);
            Name = name;
        }

        protected void AddArgument(string name, QueryBuilderParameter value)
        {
            if (value != null)
                _arguments[name] = value;
        }
    }

    public abstract class GraphQlQueryBuilder : IGraphQlQueryBuilder
    {
        private readonly Dictionary<string, GraphQlFieldCriteria> _fieldCriteria = new Dictionary<string, GraphQlFieldCriteria>();

        private string _operationType { get; }
        private string _operationName { get; }
        private Dictionary<string, GraphQlFragmentCriteria> _fragments;
        private List<QueryBuilderArgumentInfo> _queryParameters;

        protected abstract string TypeName { get; }

        public abstract IReadOnlyList<FieldMetadata> AllFields { get; }

        protected GraphQlQueryBuilder(string operationType, string operationName)
        {
            GraphQlQueryHelper.ValidateGraphQlIdentifier(nameof(operationName), operationName);
            _operationType = operationType;
            _operationName = operationName;
        }

        public virtual void Clear()
        {
            _fieldCriteria.Clear();
            _fragments?.Clear();
            _queryParameters?.Clear();
        }

        void IGraphQlQueryBuilder.IncludeAllFields()
        {
            IncludeAllFields();
        }

        public string Build(Formatting formatting = Formatting.None, byte indentationSize = 2)
        {
            return Build(formatting, 1, indentationSize);
        }

        protected void IncludeAllFields()
        {
            IncludeFields(AllFields);
        }

        protected virtual string Build(Formatting formatting, int level, byte indentationSize)
        {
            var isIndentedFormatting = formatting == Formatting.Indented;
            var separator = String.Empty;
            var indentationSpace = isIndentedFormatting ? " " : String.Empty;
            var builder = new StringBuilder();

            if (!String.IsNullOrEmpty(_operationType))
            {
                builder.Append(_operationType);

                if (!String.IsNullOrEmpty(_operationName))
                {
                    builder.Append(" ");
                    builder.Append(_operationName);
                }

                if (_queryParameters?.Count > 0)
                {
                    builder.Append(indentationSpace);
                    builder.Append("(");

                    foreach (var queryParameterInfo in _queryParameters)
                    {
                        if (isIndentedFormatting)
                        {
                            builder.AppendLine(separator);
                            builder.Append(GraphQlQueryHelper.GetIndentation(level, indentationSize));
                        }
                        else
                            builder.Append(separator);

                        builder.Append("$");
                        builder.Append(queryParameterInfo.ArgumentValue.Name);
                        builder.Append(":");
                        builder.Append(indentationSpace);

                        builder.Append(queryParameterInfo.ArgumentValue.GraphQlTypeName);

                        if (!queryParameterInfo.ArgumentValue.GraphQlTypeName.EndsWith("!"))
                        {
                            builder.Append(indentationSpace);
                            builder.Append("=");
                            builder.Append(indentationSpace);
                            builder.Append(GraphQlQueryHelper.BuildArgumentValue(queryParameterInfo.ArgumentValue.Value, queryParameterInfo.FormatMask, formatting, 0, indentationSize));
                        }

                        separator = ",";
                    }

                    builder.Append(")");
                }
            }

            builder.Append(indentationSpace);
            builder.Append("{");

            if (isIndentedFormatting)
                builder.AppendLine();

            separator = String.Empty;

            foreach (var criteria in _fieldCriteria.Values.Concat(_fragments?.Values ?? Enumerable.Empty<GraphQlFragmentCriteria>()))
            {
                var fieldCriteria = criteria.Build(formatting, level, indentationSize);
                if (isIndentedFormatting)
                    builder.AppendLine(fieldCriteria);
                else if (!String.IsNullOrEmpty(fieldCriteria))
                {
                    builder.Append(separator);
                    builder.Append(fieldCriteria);
                }

                separator = ",";
            }

            if (isIndentedFormatting)
                builder.Append(GraphQlQueryHelper.GetIndentation(level - 1, indentationSize));

            builder.Append("}");

            return builder.ToString();
        }

        protected void IncludeScalarField(string fieldName, string alias, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
        {
            _fieldCriteria[alias ?? fieldName] = new GraphQlScalarFieldCriteria(fieldName, alias, args, directives);
        }

        protected void IncludeObjectField(string fieldName, string alias, GraphQlQueryBuilder objectFieldQueryBuilder, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
        {
            _fieldCriteria[alias ?? fieldName] = new GraphQlObjectFieldCriteria(fieldName, alias, objectFieldQueryBuilder, args, directives);
        }

        protected void IncludeFragment(GraphQlQueryBuilder objectFieldQueryBuilder, GraphQlDirective[] directives)
        {
            _fragments = _fragments ?? new Dictionary<string, GraphQlFragmentCriteria>();
            _fragments[objectFieldQueryBuilder.TypeName] = new GraphQlFragmentCriteria(objectFieldQueryBuilder, directives);
        }

        protected void ExcludeField(string fieldName)
        {
            if (fieldName == null)
                throw new ArgumentNullException(nameof(fieldName));

            _fieldCriteria.Remove(fieldName);
        }

        protected void IncludeFields(IEnumerable<FieldMetadata> fields)
        {
            IncludeFields(fields, null);
        }

        private void IncludeFields(IEnumerable<FieldMetadata> fields, List<Type> parentTypes)
        {
            foreach (var field in fields)
            {
                if (field.QueryBuilderType == null)
                    IncludeScalarField(field.Name, field.DefaultAlias, null, null);
                else
                {
                    var builderType = GetType();

                    if (parentTypes != null && parentTypes.Any(t => t.IsAssignableFrom(field.QueryBuilderType)))
                        continue;

                    parentTypes?.Add(builderType);

                    var queryBuilder = InitializeChildBuilder(builderType, field.QueryBuilderType, parentTypes);

                    var includeFragmentMethods = field.QueryBuilderType.GetMethods().Where(IsIncludeFragmentMethod);

                    foreach (var includeFragmentMethod in includeFragmentMethods)
                        includeFragmentMethod.Invoke(queryBuilder, new object[] { InitializeChildBuilder(builderType, includeFragmentMethod.GetParameters()[0].ParameterType, parentTypes) });

                    IncludeObjectField(field.Name, field.DefaultAlias, queryBuilder, null, null);
                }
            }
        }

        private static GraphQlQueryBuilder InitializeChildBuilder(Type parentQueryBuilderType, Type queryBuilderType, List<Type> parentTypes)
        {
            var queryBuilder = (GraphQlQueryBuilder)Activator.CreateInstance(queryBuilderType);
            queryBuilder.IncludeFields(queryBuilder.AllFields, parentTypes ?? new List<Type> { parentQueryBuilderType });
            return queryBuilder;
        }

        private static bool IsIncludeFragmentMethod(MethodInfo methodInfo)
        {
            if (!methodInfo.Name.StartsWith("With") || !methodInfo.Name.EndsWith("Fragment"))
                return false;

            var parameters = methodInfo.GetParameters();
            return parameters.Length == 1 && parameters[0].ParameterType.IsSubclassOf(typeof(GraphQlQueryBuilder));
        }

        private static bool IsCompatibleConstructor(ConstructorInfo constructorInfo)
        {
            var parameters = constructorInfo.GetParameters();
            if (parameters.Length == 0 || parameters[0].ParameterType != typeof(String))
                return false;

            return parameters.Skip(1).All(p => p.ParameterType.IsSubclassOf(typeof(GraphQlDirective)));
        }

        protected void AddParameter<T>(GraphQlQueryParameter<T> parameter)
        {
            if (_queryParameters == null)
                _queryParameters = new List<QueryBuilderArgumentInfo>();

            _queryParameters.Add(new QueryBuilderArgumentInfo { ArgumentValue = parameter, FormatMask = parameter.FormatMask });
        }

        private abstract class GraphQlFieldCriteria
        {
            private readonly IList<QueryBuilderArgumentInfo> _args;
            private readonly GraphQlDirective[] _directives;

            protected readonly string FieldName;
            protected readonly string Alias;

            protected static string GetIndentation(Formatting formatting, int level, byte indentationSize) =>
                formatting == Formatting.Indented ? GraphQlQueryHelper.GetIndentation(level, indentationSize) : null;

            protected GraphQlFieldCriteria(string fieldName, string alias, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
            {
                GraphQlQueryHelper.ValidateGraphQlIdentifier(nameof(alias), alias);
                FieldName = fieldName;
                Alias = alias;
                _args = args;
                _directives = directives;
            }

            public abstract string Build(Formatting formatting, int level, byte indentationSize);

            protected string BuildArgumentClause(Formatting formatting, int level, byte indentationSize)
            {
                var separator = formatting == Formatting.Indented ? " " : null;
                var argumentCount = _args?.Count ?? 0;
                if (argumentCount == 0)
                    return String.Empty;

                var arguments =
                    _args.Select(
                        a => $"{a.ArgumentName}:{separator}{(a.ArgumentValue.Name == null ? GraphQlQueryHelper.BuildArgumentValue(a.ArgumentValue.Value, a.FormatMask, formatting, level, indentationSize) : "$" + a.ArgumentValue.Name)}");

                return $"({String.Join($",{separator}", arguments)})";
            }

            protected string BuildDirectiveClause(Formatting formatting, int level, byte indentationSize) =>
                _directives == null ? null : String.Concat(_directives.Select(d => d == null ? null : GraphQlQueryHelper.BuildDirective(d, formatting, level, indentationSize)));

            protected static string BuildAliasPrefix(string alias, Formatting formatting)
            {
                var separator = formatting == Formatting.Indented ? " " : String.Empty;
                return String.IsNullOrWhiteSpace(alias) ? null : alias + ':' + separator;
            }
        }

        private class GraphQlScalarFieldCriteria : GraphQlFieldCriteria
        {
            public GraphQlScalarFieldCriteria(string fieldName, string alias, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
                : base(fieldName, alias, args, directives)
            {
            }

            public override string Build(Formatting formatting, int level, byte indentationSize) =>
                GetIndentation(formatting, level, indentationSize) +
                BuildAliasPrefix(Alias, formatting) +
                FieldName +
                BuildArgumentClause(formatting, level, indentationSize) +
                BuildDirectiveClause(formatting, level, indentationSize);
        }

        private class GraphQlObjectFieldCriteria : GraphQlFieldCriteria
        {
            private readonly GraphQlQueryBuilder _objectQueryBuilder;

            public GraphQlObjectFieldCriteria(string fieldName, string alias, GraphQlQueryBuilder objectQueryBuilder, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
                : base(fieldName, alias, args, directives)
            {
                _objectQueryBuilder = objectQueryBuilder;
            }

            public override string Build(Formatting formatting, int level, byte indentationSize) =>
                _objectQueryBuilder._fieldCriteria.Count > 0 || _objectQueryBuilder._fragments?.Count > 0
                    ? GetIndentation(formatting, level, indentationSize) + BuildAliasPrefix(Alias, formatting) + FieldName +
                      BuildArgumentClause(formatting, level, indentationSize) + BuildDirectiveClause(formatting, level, indentationSize) + _objectQueryBuilder.Build(formatting, level + 1, indentationSize)
                    : null;
        }

        private class GraphQlFragmentCriteria : GraphQlFieldCriteria
        {
            private readonly GraphQlQueryBuilder _objectQueryBuilder;

            public GraphQlFragmentCriteria(GraphQlQueryBuilder objectQueryBuilder, GraphQlDirective[] directives) : base(objectQueryBuilder.TypeName, null, null, directives)
            {
                _objectQueryBuilder = objectQueryBuilder;
            }

            public override string Build(Formatting formatting, int level, byte indentationSize) =>
                _objectQueryBuilder._fieldCriteria.Count == 0
                    ? null
                    : GetIndentation(formatting, level, indentationSize) + "..." + (formatting == Formatting.Indented ? " " : null) + "on " +
                      FieldName + BuildArgumentClause(formatting, level, indentationSize) + BuildDirectiveClause(formatting, level, indentationSize) + _objectQueryBuilder.Build(formatting, level + 1, indentationSize);
        }
    }

    public abstract class GraphQlQueryBuilder<TQueryBuilder> : GraphQlQueryBuilder where TQueryBuilder : GraphQlQueryBuilder<TQueryBuilder>
    {
        protected GraphQlQueryBuilder(string operationType = null, string operationName = null) : base(operationType, operationName)
        {
        }

        public TQueryBuilder WithAllFields()
        {
            IncludeAllFields();
            return (TQueryBuilder)this;
        }

        public TQueryBuilder WithAllScalarFields()
        {
            IncludeFields(AllFields.Where(f => !f.IsComplex));
            return (TQueryBuilder)this;
        }

        public TQueryBuilder ExceptField(string fieldName)
        {
            ExcludeField(fieldName);
            return (TQueryBuilder)this;
        }

        public TQueryBuilder WithTypeName(string alias = null, params GraphQlDirective[] directives)
        {
            IncludeScalarField("__typename", alias, null, directives);
            return (TQueryBuilder)this;
        }

        protected TQueryBuilder WithScalarField(string fieldName, string alias, GraphQlDirective[] directives, IList<QueryBuilderArgumentInfo> args = null)
        {
            IncludeScalarField(fieldName, alias, args, directives);
            return (TQueryBuilder)this;
        }

        protected TQueryBuilder WithObjectField(string fieldName, string alias, GraphQlQueryBuilder queryBuilder, GraphQlDirective[] directives, IList<QueryBuilderArgumentInfo> args = null)
        {
            IncludeObjectField(fieldName, alias, queryBuilder, args, directives);
            return (TQueryBuilder)this;
        }

        protected TQueryBuilder WithFragment(GraphQlQueryBuilder queryBuilder, GraphQlDirective[] directives)
        {
            IncludeFragment(queryBuilder, directives);
            return (TQueryBuilder)this;
        }

        protected TQueryBuilder WithParameterInternal<T>(GraphQlQueryParameter<T> parameter)
        {
            AddParameter(parameter);
            return (TQueryBuilder)this;
        }
    }

    public abstract class GraphQlResponse<TDataContract>
    {
        public TDataContract Data { get; set; }
        public ICollection<QueryError> Errors { get; set; }
    }

    public class QueryError
    {
        public string Message { get; set; }
        public ICollection<ErrorLocation> Locations { get; set; }
    }

    public class ErrorLocation
    {
        public int Line { get; set; }
        public int Column { get; set; }
    }
    #endregion

    #region enums
    public enum PropertyType
    {
        [EnumMember(Value = "PRODUCT")] Product,
        [EnumMember(Value = "VARIATION")] Variation,
        [EnumMember(Value = "CATEGORY")] Category,
        [EnumMember(Value = "CATALOG")] Catalog
    }

    public enum FacetTypes
    {
        [EnumMember(Value = "TERMS")] Terms,
        [EnumMember(Value = "RANGE")] Range,
        [EnumMember(Value = "FILTER")] Filter
    }
    #endregion

    #region directives
    public class IncludeDirective : GraphQlDirective
    {
        public IncludeDirective(QueryBuilderParameter<bool> @if) : base("include")
        {
            AddArgument("if", @if);
        }
    }

    public class SkipDirective : GraphQlDirective
    {
        public SkipDirective(QueryBuilderParameter<bool> @if) : base("skip")
        {
            AddArgument("if", @if);
        }
    }
    #endregion

    #region builder classes
    public class QueryQueryBuilder : GraphQlQueryBuilder<QueryQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "cart", IsComplex = true, QueryBuilderType = typeof(CartTypeQueryBuilder) },
                new FieldMetadata { Name = "product", IsComplex = true, QueryBuilderType = typeof(ProductQueryBuilder) },
                new FieldMetadata { Name = "products", IsComplex = true, QueryBuilderType = typeof(ProductConnectionQueryBuilder) }
            };

        protected override string TypeName { get { return "Query"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public QueryQueryBuilder(string operationName = null) : base("query", operationName)
        {
        }

        public QueryQueryBuilder WithParameter<T>(GraphQlQueryParameter<T> parameter)
        {
            return WithParameterInternal(parameter);
        }

        public QueryQueryBuilder WithCart(CartTypeQueryBuilder cartTypeQueryBuilder, QueryBuilderParameter<string> storeId, QueryBuilderParameter<string> cartName, QueryBuilderParameter<string> userId, QueryBuilderParameter<string> cultureName, QueryBuilderParameter<string> currencyCode, QueryBuilderParameter<string> type, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "storeId", ArgumentValue = storeId });
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "cartName", ArgumentValue = cartName });
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "userId", ArgumentValue = userId });
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "cultureName", ArgumentValue = cultureName });
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "currencyCode", ArgumentValue = currencyCode });
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "type", ArgumentValue = type });
            return WithObjectField("cart", alias, cartTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptCart()
        {
            return ExceptField("cart");
        }

        public QueryQueryBuilder WithProduct(ProductQueryBuilder productQueryBuilder, QueryBuilderParameter<string> id, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id });
            return WithObjectField("product", alias, productQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptProduct()
        {
            return ExceptField("product");
        }

        public QueryQueryBuilder WithProducts(ProductConnectionQueryBuilder productConnectionQueryBuilder, QueryBuilderParameter<string> after = null, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<string> query = null, QueryBuilderParameter<string> filter = null, QueryBuilderParameter<bool?> fuzzy = null, QueryBuilderParameter<string> facet = null, QueryBuilderParameter<string> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (after != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "after", ArgumentValue = after });

            if (first != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "first", ArgumentValue = first });

            if (query != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "query", ArgumentValue = query });

            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            if (fuzzy != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "fuzzy", ArgumentValue = fuzzy });

            if (facet != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "facet", ArgumentValue = facet });

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort });

            return WithObjectField("products", alias, productConnectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptProducts()
        {
            return ExceptField("products");
        }
    }

    public class CartTypeQueryBuilder : GraphQlQueryBuilder<CartTypeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "addresses", IsComplex = true, QueryBuilderType = typeof(AddressTypeQueryBuilder) },
                new FieldMetadata { Name = "availablePaymentMethods", IsComplex = true, QueryBuilderType = typeof(PaymentMethodTypeQueryBuilder) },
                new FieldMetadata { Name = "channelId" },
                new FieldMetadata { Name = "comment" },
                new FieldMetadata { Name = "coupon", IsComplex = true, QueryBuilderType = typeof(CopuponTypeQueryBuilder) },
                new FieldMetadata { Name = "coupons", IsComplex = true, QueryBuilderType = typeof(CopuponTypeQueryBuilder) },
                new FieldMetadata { Name = "currency", IsComplex = true, QueryBuilderType = typeof(CurrencyTypeQueryBuilder) },
                new FieldMetadata { Name = "customerId" },
                new FieldMetadata { Name = "customerName" },
                new FieldMetadata { Name = "discounts", IsComplex = true, QueryBuilderType = typeof(DiscountTypeQueryBuilder) },
                new FieldMetadata { Name = "discountTotal", IsComplex = true, QueryBuilderType = typeof(MoneyTypeQueryBuilder) },
                new FieldMetadata { Name = "discountTotalWithTax", IsComplex = true, QueryBuilderType = typeof(MoneyTypeQueryBuilder) },
                new FieldMetadata { Name = "extendedPriceTotal", IsComplex = true, QueryBuilderType = typeof(MoneyTypeQueryBuilder) },
                new FieldMetadata { Name = "extendedPriceTotalWithTax", IsComplex = true, QueryBuilderType = typeof(MoneyTypeQueryBuilder) },
                new FieldMetadata { Name = "handlingTotal", IsComplex = true, QueryBuilderType = typeof(MoneyTypeQueryBuilder) },
                new FieldMetadata { Name = "handlingTotalWithTax", IsComplex = true, QueryBuilderType = typeof(MoneyTypeQueryBuilder) },
                new FieldMetadata { Name = "hasPhysicalProducts" },
                new FieldMetadata { Name = "height", IsComplex = true },
                new FieldMetadata { Name = "isAnonymous" },
                new FieldMetadata { Name = "isRecuring" },
                new FieldMetadata { Name = "isValid" },
                new FieldMetadata { Name = "items", IsComplex = true, QueryBuilderType = typeof(LineItemTypeQueryBuilder) },
                new FieldMetadata { Name = "itemsCount" },
                new FieldMetadata { Name = "itemsQuantity" },
                new FieldMetadata { Name = "length", IsComplex = true },
                new FieldMetadata { Name = "measureUnit" },
                new FieldMetadata { Name = "name" },
                new FieldMetadata { Name = "objectType" },
                new FieldMetadata { Name = "organizationId" },
                new FieldMetadata { Name = "paymentPlan", IsComplex = true, QueryBuilderType = typeof(PaymentPlanTypeQueryBuilder) },
                new FieldMetadata { Name = "paymentPrice", IsComplex = true, QueryBuilderType = typeof(MoneyTypeQueryBuilder) },
                new FieldMetadata { Name = "paymentPriceWithTax", IsComplex = true, QueryBuilderType = typeof(MoneyTypeQueryBuilder) },
                new FieldMetadata { Name = "payments", IsComplex = true, QueryBuilderType = typeof(PaymentTypeQueryBuilder) },
                new FieldMetadata { Name = "paymentTotal", IsComplex = true, QueryBuilderType = typeof(MoneyTypeQueryBuilder) },
                new FieldMetadata { Name = "paymentTotalWithTax", IsComplex = true, QueryBuilderType = typeof(MoneyTypeQueryBuilder) },
                new FieldMetadata { Name = "recentlyAddedItem", IsComplex = true, QueryBuilderType = typeof(LineItemTypeQueryBuilder) },
                new FieldMetadata { Name = "shipments", IsComplex = true, QueryBuilderType = typeof(ShipmentTypeQueryBuilder) },
                new FieldMetadata { Name = "shippingPrice", IsComplex = true, QueryBuilderType = typeof(MoneyTypeQueryBuilder) },
                new FieldMetadata { Name = "shippingPriceWithTax", IsComplex = true, QueryBuilderType = typeof(MoneyTypeQueryBuilder) },
                new FieldMetadata { Name = "shippingTotal", IsComplex = true, QueryBuilderType = typeof(MoneyTypeQueryBuilder) },
                new FieldMetadata { Name = "shippingTotalWithTax", IsComplex = true, QueryBuilderType = typeof(MoneyTypeQueryBuilder) },
                new FieldMetadata { Name = "status" },
                new FieldMetadata { Name = "storeId" },
                new FieldMetadata { Name = "subTotal", IsComplex = true, QueryBuilderType = typeof(MoneyTypeQueryBuilder) },
                new FieldMetadata { Name = "subTotalWithTax", IsComplex = true, QueryBuilderType = typeof(MoneyTypeQueryBuilder) },
                new FieldMetadata { Name = "taxDetails", IsComplex = true, QueryBuilderType = typeof(TaxDetailTypeQueryBuilder) },
                new FieldMetadata { Name = "taxPercentRate", IsComplex = true },
                new FieldMetadata { Name = "taxTotal", IsComplex = true, QueryBuilderType = typeof(MoneyTypeQueryBuilder) },
                new FieldMetadata { Name = "taxType" },
                new FieldMetadata { Name = "total", IsComplex = true, QueryBuilderType = typeof(MoneyTypeQueryBuilder) },
                new FieldMetadata { Name = "type" },
                new FieldMetadata { Name = "validationErrors", IsComplex = true, QueryBuilderType = typeof(ValidationErrorTypeQueryBuilder) },
                new FieldMetadata { Name = "volumetricWeight", IsComplex = true },
                new FieldMetadata { Name = "weight", IsComplex = true },
                new FieldMetadata { Name = "weightUnit" },
                new FieldMetadata { Name = "width", IsComplex = true }
            };

        protected override string TypeName { get { return "CartType"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public CartTypeQueryBuilder WithAddresses(AddressTypeQueryBuilder addressTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("addresses", alias, addressTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartTypeQueryBuilder ExceptAddresses()
        {
            return ExceptField("addresses");
        }

        public CartTypeQueryBuilder WithAvailablePaymentMethods(PaymentMethodTypeQueryBuilder paymentMethodTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("availablePaymentMethods", alias, paymentMethodTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartTypeQueryBuilder ExceptAvailablePaymentMethods()
        {
            return ExceptField("availablePaymentMethods");
        }

        public CartTypeQueryBuilder WithChannelId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("channelId", alias, new GraphQlDirective[] { include, skip });
        }

        public CartTypeQueryBuilder ExceptChannelId()
        {
            return ExceptField("channelId");
        }

        public CartTypeQueryBuilder WithComment(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("comment", alias, new GraphQlDirective[] { include, skip });
        }

        public CartTypeQueryBuilder ExceptComment()
        {
            return ExceptField("comment");
        }

        public CartTypeQueryBuilder WithCoupon(CopuponTypeQueryBuilder copuponTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("coupon", alias, copuponTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartTypeQueryBuilder ExceptCoupon()
        {
            return ExceptField("coupon");
        }

        public CartTypeQueryBuilder WithCoupons(CopuponTypeQueryBuilder copuponTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("coupons", alias, copuponTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartTypeQueryBuilder ExceptCoupons()
        {
            return ExceptField("coupons");
        }

        public CartTypeQueryBuilder WithCurrency(CurrencyTypeQueryBuilder currencyTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("currency", alias, currencyTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartTypeQueryBuilder ExceptCurrency()
        {
            return ExceptField("currency");
        }

        public CartTypeQueryBuilder WithCustomerId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("customerId", alias, new GraphQlDirective[] { include, skip });
        }

        public CartTypeQueryBuilder ExceptCustomerId()
        {
            return ExceptField("customerId");
        }

        public CartTypeQueryBuilder WithCustomerName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("customerName", alias, new GraphQlDirective[] { include, skip });
        }

        public CartTypeQueryBuilder ExceptCustomerName()
        {
            return ExceptField("customerName");
        }

        public CartTypeQueryBuilder WithDiscounts(DiscountTypeQueryBuilder discountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("discounts", alias, discountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartTypeQueryBuilder ExceptDiscounts()
        {
            return ExceptField("discounts");
        }

        public CartTypeQueryBuilder WithDiscountTotal(MoneyTypeQueryBuilder moneyTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("discountTotal", alias, moneyTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartTypeQueryBuilder ExceptDiscountTotal()
        {
            return ExceptField("discountTotal");
        }

        public CartTypeQueryBuilder WithDiscountTotalWithTax(MoneyTypeQueryBuilder moneyTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("discountTotalWithTax", alias, moneyTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartTypeQueryBuilder ExceptDiscountTotalWithTax()
        {
            return ExceptField("discountTotalWithTax");
        }

        public CartTypeQueryBuilder WithExtendedPriceTotal(MoneyTypeQueryBuilder moneyTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("extendedPriceTotal", alias, moneyTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartTypeQueryBuilder ExceptExtendedPriceTotal()
        {
            return ExceptField("extendedPriceTotal");
        }

        public CartTypeQueryBuilder WithExtendedPriceTotalWithTax(MoneyTypeQueryBuilder moneyTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("extendedPriceTotalWithTax", alias, moneyTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartTypeQueryBuilder ExceptExtendedPriceTotalWithTax()
        {
            return ExceptField("extendedPriceTotalWithTax");
        }

        public CartTypeQueryBuilder WithHandlingTotal(MoneyTypeQueryBuilder moneyTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("handlingTotal", alias, moneyTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartTypeQueryBuilder ExceptHandlingTotal()
        {
            return ExceptField("handlingTotal");
        }

        public CartTypeQueryBuilder WithHandlingTotalWithTax(MoneyTypeQueryBuilder moneyTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("handlingTotalWithTax", alias, moneyTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartTypeQueryBuilder ExceptHandlingTotalWithTax()
        {
            return ExceptField("handlingTotalWithTax");
        }

        public CartTypeQueryBuilder WithHasPhysicalProducts(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("hasPhysicalProducts", alias, new GraphQlDirective[] { include, skip });
        }

        public CartTypeQueryBuilder ExceptHasPhysicalProducts()
        {
            return ExceptField("hasPhysicalProducts");
        }

        public CartTypeQueryBuilder WithHeight(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("height", alias, new GraphQlDirective[] { include, skip });
        }

        public CartTypeQueryBuilder ExceptHeight()
        {
            return ExceptField("height");
        }

        public CartTypeQueryBuilder WithIsAnonymous(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isAnonymous", alias, new GraphQlDirective[] { include, skip });
        }

        public CartTypeQueryBuilder ExceptIsAnonymous()
        {
            return ExceptField("isAnonymous");
        }

        public CartTypeQueryBuilder WithIsRecuring(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isRecuring", alias, new GraphQlDirective[] { include, skip });
        }

        public CartTypeQueryBuilder ExceptIsRecuring()
        {
            return ExceptField("isRecuring");
        }

        public CartTypeQueryBuilder WithIsValid(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isValid", alias, new GraphQlDirective[] { include, skip });
        }

        public CartTypeQueryBuilder ExceptIsValid()
        {
            return ExceptField("isValid");
        }

        public CartTypeQueryBuilder WithItems(LineItemTypeQueryBuilder lineItemTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("items", alias, lineItemTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartTypeQueryBuilder ExceptItems()
        {
            return ExceptField("items");
        }

        public CartTypeQueryBuilder WithItemsCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("itemsCount", alias, new GraphQlDirective[] { include, skip });
        }

        public CartTypeQueryBuilder ExceptItemsCount()
        {
            return ExceptField("itemsCount");
        }

        public CartTypeQueryBuilder WithItemsQuantity(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("itemsQuantity", alias, new GraphQlDirective[] { include, skip });
        }

        public CartTypeQueryBuilder ExceptItemsQuantity()
        {
            return ExceptField("itemsQuantity");
        }

        public CartTypeQueryBuilder WithLength(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("length", alias, new GraphQlDirective[] { include, skip });
        }

        public CartTypeQueryBuilder ExceptLength()
        {
            return ExceptField("length");
        }

        public CartTypeQueryBuilder WithMeasureUnit(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("measureUnit", alias, new GraphQlDirective[] { include, skip });
        }

        public CartTypeQueryBuilder ExceptMeasureUnit()
        {
            return ExceptField("measureUnit");
        }

        public CartTypeQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public CartTypeQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public CartTypeQueryBuilder WithObjectType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("objectType", alias, new GraphQlDirective[] { include, skip });
        }

        public CartTypeQueryBuilder ExceptObjectType()
        {
            return ExceptField("objectType");
        }

        public CartTypeQueryBuilder WithOrganizationId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("organizationId", alias, new GraphQlDirective[] { include, skip });
        }

        public CartTypeQueryBuilder ExceptOrganizationId()
        {
            return ExceptField("organizationId");
        }

        public CartTypeQueryBuilder WithPaymentPlan(PaymentPlanTypeQueryBuilder paymentPlanTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("paymentPlan", alias, paymentPlanTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartTypeQueryBuilder ExceptPaymentPlan()
        {
            return ExceptField("paymentPlan");
        }

        public CartTypeQueryBuilder WithPaymentPrice(MoneyTypeQueryBuilder moneyTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("paymentPrice", alias, moneyTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartTypeQueryBuilder ExceptPaymentPrice()
        {
            return ExceptField("paymentPrice");
        }

        public CartTypeQueryBuilder WithPaymentPriceWithTax(MoneyTypeQueryBuilder moneyTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("paymentPriceWithTax", alias, moneyTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartTypeQueryBuilder ExceptPaymentPriceWithTax()
        {
            return ExceptField("paymentPriceWithTax");
        }

        public CartTypeQueryBuilder WithPayments(PaymentTypeQueryBuilder paymentTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("payments", alias, paymentTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartTypeQueryBuilder ExceptPayments()
        {
            return ExceptField("payments");
        }

        public CartTypeQueryBuilder WithPaymentTotal(MoneyTypeQueryBuilder moneyTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("paymentTotal", alias, moneyTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartTypeQueryBuilder ExceptPaymentTotal()
        {
            return ExceptField("paymentTotal");
        }

        public CartTypeQueryBuilder WithPaymentTotalWithTax(MoneyTypeQueryBuilder moneyTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("paymentTotalWithTax", alias, moneyTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartTypeQueryBuilder ExceptPaymentTotalWithTax()
        {
            return ExceptField("paymentTotalWithTax");
        }

        public CartTypeQueryBuilder WithRecentlyAddedItem(LineItemTypeQueryBuilder lineItemTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("recentlyAddedItem", alias, lineItemTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartTypeQueryBuilder ExceptRecentlyAddedItem()
        {
            return ExceptField("recentlyAddedItem");
        }

        public CartTypeQueryBuilder WithShipments(ShipmentTypeQueryBuilder shipmentTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("shipments", alias, shipmentTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartTypeQueryBuilder ExceptShipments()
        {
            return ExceptField("shipments");
        }

        public CartTypeQueryBuilder WithShippingPrice(MoneyTypeQueryBuilder moneyTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("shippingPrice", alias, moneyTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartTypeQueryBuilder ExceptShippingPrice()
        {
            return ExceptField("shippingPrice");
        }

        public CartTypeQueryBuilder WithShippingPriceWithTax(MoneyTypeQueryBuilder moneyTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("shippingPriceWithTax", alias, moneyTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartTypeQueryBuilder ExceptShippingPriceWithTax()
        {
            return ExceptField("shippingPriceWithTax");
        }

        public CartTypeQueryBuilder WithShippingTotal(MoneyTypeQueryBuilder moneyTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("shippingTotal", alias, moneyTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartTypeQueryBuilder ExceptShippingTotal()
        {
            return ExceptField("shippingTotal");
        }

        public CartTypeQueryBuilder WithShippingTotalWithTax(MoneyTypeQueryBuilder moneyTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("shippingTotalWithTax", alias, moneyTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartTypeQueryBuilder ExceptShippingTotalWithTax()
        {
            return ExceptField("shippingTotalWithTax");
        }

        public CartTypeQueryBuilder WithStatus(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("status", alias, new GraphQlDirective[] { include, skip });
        }

        public CartTypeQueryBuilder ExceptStatus()
        {
            return ExceptField("status");
        }

        public CartTypeQueryBuilder WithStoreId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("storeId", alias, new GraphQlDirective[] { include, skip });
        }

        public CartTypeQueryBuilder ExceptStoreId()
        {
            return ExceptField("storeId");
        }

        public CartTypeQueryBuilder WithSubTotal(MoneyTypeQueryBuilder moneyTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("subTotal", alias, moneyTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartTypeQueryBuilder ExceptSubTotal()
        {
            return ExceptField("subTotal");
        }

        public CartTypeQueryBuilder WithSubTotalWithTax(MoneyTypeQueryBuilder moneyTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("subTotalWithTax", alias, moneyTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartTypeQueryBuilder ExceptSubTotalWithTax()
        {
            return ExceptField("subTotalWithTax");
        }

        public CartTypeQueryBuilder WithTaxDetails(TaxDetailTypeQueryBuilder taxDetailTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("taxDetails", alias, taxDetailTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartTypeQueryBuilder ExceptTaxDetails()
        {
            return ExceptField("taxDetails");
        }

        public CartTypeQueryBuilder WithTaxPercentRate(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("taxPercentRate", alias, new GraphQlDirective[] { include, skip });
        }

        public CartTypeQueryBuilder ExceptTaxPercentRate()
        {
            return ExceptField("taxPercentRate");
        }

        public CartTypeQueryBuilder WithTaxTotal(MoneyTypeQueryBuilder moneyTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("taxTotal", alias, moneyTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartTypeQueryBuilder ExceptTaxTotal()
        {
            return ExceptField("taxTotal");
        }

        public CartTypeQueryBuilder WithTaxType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("taxType", alias, new GraphQlDirective[] { include, skip });
        }

        public CartTypeQueryBuilder ExceptTaxType()
        {
            return ExceptField("taxType");
        }

        public CartTypeQueryBuilder WithTotal(MoneyTypeQueryBuilder moneyTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("total", alias, moneyTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartTypeQueryBuilder ExceptTotal()
        {
            return ExceptField("total");
        }

        public CartTypeQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public CartTypeQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }

        public CartTypeQueryBuilder WithValidationErrors(ValidationErrorTypeQueryBuilder validationErrorTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("validationErrors", alias, validationErrorTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartTypeQueryBuilder ExceptValidationErrors()
        {
            return ExceptField("validationErrors");
        }

        public CartTypeQueryBuilder WithVolumetricWeight(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("volumetricWeight", alias, new GraphQlDirective[] { include, skip });
        }

        public CartTypeQueryBuilder ExceptVolumetricWeight()
        {
            return ExceptField("volumetricWeight");
        }

        public CartTypeQueryBuilder WithWeight(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("weight", alias, new GraphQlDirective[] { include, skip });
        }

        public CartTypeQueryBuilder ExceptWeight()
        {
            return ExceptField("weight");
        }

        public CartTypeQueryBuilder WithWeightUnit(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("weightUnit", alias, new GraphQlDirective[] { include, skip });
        }

        public CartTypeQueryBuilder ExceptWeightUnit()
        {
            return ExceptField("weightUnit");
        }

        public CartTypeQueryBuilder WithWidth(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("width", alias, new GraphQlDirective[] { include, skip });
        }

        public CartTypeQueryBuilder ExceptWidth()
        {
            return ExceptField("width");
        }
    }

    public class MoneyTypeQueryBuilder : GraphQlQueryBuilder<MoneyTypeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "amount", IsComplex = true },
                new FieldMetadata { Name = "decimalDigits" },
                new FieldMetadata { Name = "formattedAmount" },
                new FieldMetadata { Name = "formattedAmountWithoutCurrency" },
                new FieldMetadata { Name = "formattedAmountWithoutPoint" },
                new FieldMetadata { Name = "formattedAmountWithoutPointAndCurrency" }
            };

        protected override string TypeName { get { return "MoneyType"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public MoneyTypeQueryBuilder WithAmount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("amount", alias, new GraphQlDirective[] { include, skip });
        }

        public MoneyTypeQueryBuilder ExceptAmount()
        {
            return ExceptField("amount");
        }

        public MoneyTypeQueryBuilder WithDecimalDigits(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("decimalDigits", alias, new GraphQlDirective[] { include, skip });
        }

        public MoneyTypeQueryBuilder ExceptDecimalDigits()
        {
            return ExceptField("decimalDigits");
        }

        public MoneyTypeQueryBuilder WithFormattedAmount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("formattedAmount", alias, new GraphQlDirective[] { include, skip });
        }

        public MoneyTypeQueryBuilder ExceptFormattedAmount()
        {
            return ExceptField("formattedAmount");
        }

        public MoneyTypeQueryBuilder WithFormattedAmountWithoutCurrency(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("formattedAmountWithoutCurrency", alias, new GraphQlDirective[] { include, skip });
        }

        public MoneyTypeQueryBuilder ExceptFormattedAmountWithoutCurrency()
        {
            return ExceptField("formattedAmountWithoutCurrency");
        }

        public MoneyTypeQueryBuilder WithFormattedAmountWithoutPoint(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("formattedAmountWithoutPoint", alias, new GraphQlDirective[] { include, skip });
        }

        public MoneyTypeQueryBuilder ExceptFormattedAmountWithoutPoint()
        {
            return ExceptField("formattedAmountWithoutPoint");
        }

        public MoneyTypeQueryBuilder WithFormattedAmountWithoutPointAndCurrency(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("formattedAmountWithoutPointAndCurrency", alias, new GraphQlDirective[] { include, skip });
        }

        public MoneyTypeQueryBuilder ExceptFormattedAmountWithoutPointAndCurrency()
        {
            return ExceptField("formattedAmountWithoutPointAndCurrency");
        }
    }

    public class CurrencyTypeQueryBuilder : GraphQlQueryBuilder<CurrencyTypeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "code" },
                new FieldMetadata { Name = "cultureName" },
                new FieldMetadata { Name = "customFormatting" },
                new FieldMetadata { Name = "englishName" },
                new FieldMetadata { Name = "exchangeRate", IsComplex = true },
                new FieldMetadata { Name = "symbol" }
            };

        protected override string TypeName { get { return "CurrencyType"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public CurrencyTypeQueryBuilder WithCode(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("code", alias, new GraphQlDirective[] { include, skip });
        }

        public CurrencyTypeQueryBuilder ExceptCode()
        {
            return ExceptField("code");
        }

        public CurrencyTypeQueryBuilder WithCultureName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("cultureName", alias, new GraphQlDirective[] { include, skip });
        }

        public CurrencyTypeQueryBuilder ExceptCultureName()
        {
            return ExceptField("cultureName");
        }

        public CurrencyTypeQueryBuilder WithCustomFormatting(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("customFormatting", alias, new GraphQlDirective[] { include, skip });
        }

        public CurrencyTypeQueryBuilder ExceptCustomFormatting()
        {
            return ExceptField("customFormatting");
        }

        public CurrencyTypeQueryBuilder WithEnglishName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("englishName", alias, new GraphQlDirective[] { include, skip });
        }

        public CurrencyTypeQueryBuilder ExceptEnglishName()
        {
            return ExceptField("englishName");
        }

        public CurrencyTypeQueryBuilder WithExchangeRate(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("exchangeRate", alias, new GraphQlDirective[] { include, skip });
        }

        public CurrencyTypeQueryBuilder ExceptExchangeRate()
        {
            return ExceptField("exchangeRate");
        }

        public CurrencyTypeQueryBuilder WithSymbol(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("symbol", alias, new GraphQlDirective[] { include, skip });
        }

        public CurrencyTypeQueryBuilder ExceptSymbol()
        {
            return ExceptField("symbol");
        }
    }

    public class TaxDetailTypeQueryBuilder : GraphQlQueryBuilder<TaxDetailTypeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "amount", IsComplex = true, QueryBuilderType = typeof(MoneyTypeQueryBuilder) },
                new FieldMetadata { Name = "name", IsComplex = true, QueryBuilderType = typeof(MoneyTypeQueryBuilder) },
                new FieldMetadata { Name = "price", IsComplex = true, QueryBuilderType = typeof(MoneyTypeQueryBuilder) },
                new FieldMetadata { Name = "rate", IsComplex = true, QueryBuilderType = typeof(MoneyTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "TaxDetailType"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public TaxDetailTypeQueryBuilder WithAmount(MoneyTypeQueryBuilder moneyTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("amount", alias, moneyTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public TaxDetailTypeQueryBuilder ExceptAmount()
        {
            return ExceptField("amount");
        }

        public TaxDetailTypeQueryBuilder WithName(MoneyTypeQueryBuilder moneyTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("name", alias, moneyTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public TaxDetailTypeQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public TaxDetailTypeQueryBuilder WithPrice(MoneyTypeQueryBuilder moneyTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("price", alias, moneyTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public TaxDetailTypeQueryBuilder ExceptPrice()
        {
            return ExceptField("price");
        }

        public TaxDetailTypeQueryBuilder WithRate(MoneyTypeQueryBuilder moneyTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("rate", alias, moneyTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public TaxDetailTypeQueryBuilder ExceptRate()
        {
            return ExceptField("rate");
        }
    }

    public class ShipmentTypeQueryBuilder : GraphQlQueryBuilder<ShipmentTypeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "currency", IsComplex = true, QueryBuilderType = typeof(CurrencyTypeQueryBuilder) },
                new FieldMetadata { Name = "deliveryAddress", IsComplex = true, QueryBuilderType = typeof(AddressTypeQueryBuilder) },
                new FieldMetadata { Name = "discountAmount", IsComplex = true, QueryBuilderType = typeof(MoneyTypeQueryBuilder) },
                new FieldMetadata { Name = "discountAmountWithTax", IsComplex = true, QueryBuilderType = typeof(MoneyTypeQueryBuilder) },
                new FieldMetadata { Name = "discounts", IsComplex = true, QueryBuilderType = typeof(DiscountTypeQueryBuilder) },
                new FieldMetadata { Name = "fulfillmentCenterId" },
                new FieldMetadata { Name = "height" },
                new FieldMetadata { Name = "isValid" },
                new FieldMetadata { Name = "items", IsComplex = true, QueryBuilderType = typeof(CartShipmentItemTypeQueryBuilder) },
                new FieldMetadata { Name = "length" },
                new FieldMetadata { Name = "measureUnit" },
                new FieldMetadata { Name = "price", IsComplex = true, QueryBuilderType = typeof(MoneyTypeQueryBuilder) },
                new FieldMetadata { Name = "priceWithTax", IsComplex = true, QueryBuilderType = typeof(MoneyTypeQueryBuilder) },
                new FieldMetadata { Name = "shipmentMethodCode" },
                new FieldMetadata { Name = "shipmentMethodOption" },
                new FieldMetadata { Name = "taxDetails", IsComplex = true, QueryBuilderType = typeof(TaxDetailTypeQueryBuilder) },
                new FieldMetadata { Name = "taxPercentRate", IsComplex = true },
                new FieldMetadata { Name = "taxTotal", IsComplex = true, QueryBuilderType = typeof(MoneyTypeQueryBuilder) },
                new FieldMetadata { Name = "taxType" },
                new FieldMetadata { Name = "total", IsComplex = true, QueryBuilderType = typeof(MoneyTypeQueryBuilder) },
                new FieldMetadata { Name = "totalWithTax", IsComplex = true, QueryBuilderType = typeof(MoneyTypeQueryBuilder) },
                new FieldMetadata { Name = "validationErrors", IsComplex = true, QueryBuilderType = typeof(ValidationErrorTypeQueryBuilder) },
                new FieldMetadata { Name = "volumetricWeight", IsComplex = true },
                new FieldMetadata { Name = "weight" },
                new FieldMetadata { Name = "weightUnit" },
                new FieldMetadata { Name = "width" }
            };

        protected override string TypeName { get { return "ShipmentType"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public ShipmentTypeQueryBuilder WithCurrency(CurrencyTypeQueryBuilder currencyTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("currency", alias, currencyTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ShipmentTypeQueryBuilder ExceptCurrency()
        {
            return ExceptField("currency");
        }

        public ShipmentTypeQueryBuilder WithDeliveryAddress(AddressTypeQueryBuilder addressTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("deliveryAddress", alias, addressTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ShipmentTypeQueryBuilder ExceptDeliveryAddress()
        {
            return ExceptField("deliveryAddress");
        }

        public ShipmentTypeQueryBuilder WithDiscountAmount(MoneyTypeQueryBuilder moneyTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("discountAmount", alias, moneyTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ShipmentTypeQueryBuilder ExceptDiscountAmount()
        {
            return ExceptField("discountAmount");
        }

        public ShipmentTypeQueryBuilder WithDiscountAmountWithTax(MoneyTypeQueryBuilder moneyTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("discountAmountWithTax", alias, moneyTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ShipmentTypeQueryBuilder ExceptDiscountAmountWithTax()
        {
            return ExceptField("discountAmountWithTax");
        }

        public ShipmentTypeQueryBuilder WithDiscounts(DiscountTypeQueryBuilder discountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("discounts", alias, discountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ShipmentTypeQueryBuilder ExceptDiscounts()
        {
            return ExceptField("discounts");
        }

        public ShipmentTypeQueryBuilder WithFulfillmentCenterId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("fulfillmentCenterId", alias, new GraphQlDirective[] { include, skip });
        }

        public ShipmentTypeQueryBuilder ExceptFulfillmentCenterId()
        {
            return ExceptField("fulfillmentCenterId");
        }

        public ShipmentTypeQueryBuilder WithHeight(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("height", alias, new GraphQlDirective[] { include, skip });
        }

        public ShipmentTypeQueryBuilder ExceptHeight()
        {
            return ExceptField("height");
        }

        public ShipmentTypeQueryBuilder WithIsValid(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isValid", alias, new GraphQlDirective[] { include, skip });
        }

        public ShipmentTypeQueryBuilder ExceptIsValid()
        {
            return ExceptField("isValid");
        }

        public ShipmentTypeQueryBuilder WithItems(CartShipmentItemTypeQueryBuilder cartShipmentItemTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("items", alias, cartShipmentItemTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ShipmentTypeQueryBuilder ExceptItems()
        {
            return ExceptField("items");
        }

        public ShipmentTypeQueryBuilder WithLength(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("length", alias, new GraphQlDirective[] { include, skip });
        }

        public ShipmentTypeQueryBuilder ExceptLength()
        {
            return ExceptField("length");
        }

        public ShipmentTypeQueryBuilder WithMeasureUnit(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("measureUnit", alias, new GraphQlDirective[] { include, skip });
        }

        public ShipmentTypeQueryBuilder ExceptMeasureUnit()
        {
            return ExceptField("measureUnit");
        }

        public ShipmentTypeQueryBuilder WithPrice(MoneyTypeQueryBuilder moneyTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("price", alias, moneyTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ShipmentTypeQueryBuilder ExceptPrice()
        {
            return ExceptField("price");
        }

        public ShipmentTypeQueryBuilder WithPriceWithTax(MoneyTypeQueryBuilder moneyTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("priceWithTax", alias, moneyTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ShipmentTypeQueryBuilder ExceptPriceWithTax()
        {
            return ExceptField("priceWithTax");
        }

        public ShipmentTypeQueryBuilder WithShipmentMethodCode(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("shipmentMethodCode", alias, new GraphQlDirective[] { include, skip });
        }

        public ShipmentTypeQueryBuilder ExceptShipmentMethodCode()
        {
            return ExceptField("shipmentMethodCode");
        }

        public ShipmentTypeQueryBuilder WithShipmentMethodOption(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("shipmentMethodOption", alias, new GraphQlDirective[] { include, skip });
        }

        public ShipmentTypeQueryBuilder ExceptShipmentMethodOption()
        {
            return ExceptField("shipmentMethodOption");
        }

        public ShipmentTypeQueryBuilder WithTaxDetails(TaxDetailTypeQueryBuilder taxDetailTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("taxDetails", alias, taxDetailTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ShipmentTypeQueryBuilder ExceptTaxDetails()
        {
            return ExceptField("taxDetails");
        }

        public ShipmentTypeQueryBuilder WithTaxPercentRate(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("taxPercentRate", alias, new GraphQlDirective[] { include, skip });
        }

        public ShipmentTypeQueryBuilder ExceptTaxPercentRate()
        {
            return ExceptField("taxPercentRate");
        }

        public ShipmentTypeQueryBuilder WithTaxTotal(MoneyTypeQueryBuilder moneyTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("taxTotal", alias, moneyTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ShipmentTypeQueryBuilder ExceptTaxTotal()
        {
            return ExceptField("taxTotal");
        }

        public ShipmentTypeQueryBuilder WithTaxType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("taxType", alias, new GraphQlDirective[] { include, skip });
        }

        public ShipmentTypeQueryBuilder ExceptTaxType()
        {
            return ExceptField("taxType");
        }

        public ShipmentTypeQueryBuilder WithTotal(MoneyTypeQueryBuilder moneyTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("total", alias, moneyTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ShipmentTypeQueryBuilder ExceptTotal()
        {
            return ExceptField("total");
        }

        public ShipmentTypeQueryBuilder WithTotalWithTax(MoneyTypeQueryBuilder moneyTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("totalWithTax", alias, moneyTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ShipmentTypeQueryBuilder ExceptTotalWithTax()
        {
            return ExceptField("totalWithTax");
        }

        public ShipmentTypeQueryBuilder WithValidationErrors(ValidationErrorTypeQueryBuilder validationErrorTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("validationErrors", alias, validationErrorTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ShipmentTypeQueryBuilder ExceptValidationErrors()
        {
            return ExceptField("validationErrors");
        }

        public ShipmentTypeQueryBuilder WithVolumetricWeight(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("volumetricWeight", alias, new GraphQlDirective[] { include, skip });
        }

        public ShipmentTypeQueryBuilder ExceptVolumetricWeight()
        {
            return ExceptField("volumetricWeight");
        }

        public ShipmentTypeQueryBuilder WithWeight(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("weight", alias, new GraphQlDirective[] { include, skip });
        }

        public ShipmentTypeQueryBuilder ExceptWeight()
        {
            return ExceptField("weight");
        }

        public ShipmentTypeQueryBuilder WithWeightUnit(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("weightUnit", alias, new GraphQlDirective[] { include, skip });
        }

        public ShipmentTypeQueryBuilder ExceptWeightUnit()
        {
            return ExceptField("weightUnit");
        }

        public ShipmentTypeQueryBuilder WithWidth(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("width", alias, new GraphQlDirective[] { include, skip });
        }

        public ShipmentTypeQueryBuilder ExceptWidth()
        {
            return ExceptField("width");
        }
    }

    public class AddressTypeQueryBuilder : GraphQlQueryBuilder<AddressTypeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "city" },
                new FieldMetadata { Name = "countryCode" },
                new FieldMetadata { Name = "countryName" },
                new FieldMetadata { Name = "email" },
                new FieldMetadata { Name = "firstName" },
                new FieldMetadata { Name = "key" },
                new FieldMetadata { Name = "lastName" },
                new FieldMetadata { Name = "line1" },
                new FieldMetadata { Name = "line2" },
                new FieldMetadata { Name = "middleName" },
                new FieldMetadata { Name = "name" },
                new FieldMetadata { Name = "organization" },
                new FieldMetadata { Name = "phone" },
                new FieldMetadata { Name = "postalCode" },
                new FieldMetadata { Name = "regionId" },
                new FieldMetadata { Name = "regionName" },
                new FieldMetadata { Name = "zip" }
            };

        protected override string TypeName { get { return "AddressType"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public AddressTypeQueryBuilder WithCity(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("city", alias, new GraphQlDirective[] { include, skip });
        }

        public AddressTypeQueryBuilder ExceptCity()
        {
            return ExceptField("city");
        }

        public AddressTypeQueryBuilder WithCountryCode(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("countryCode", alias, new GraphQlDirective[] { include, skip });
        }

        public AddressTypeQueryBuilder ExceptCountryCode()
        {
            return ExceptField("countryCode");
        }

        public AddressTypeQueryBuilder WithCountryName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("countryName", alias, new GraphQlDirective[] { include, skip });
        }

        public AddressTypeQueryBuilder ExceptCountryName()
        {
            return ExceptField("countryName");
        }

        public AddressTypeQueryBuilder WithEmail(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("email", alias, new GraphQlDirective[] { include, skip });
        }

        public AddressTypeQueryBuilder ExceptEmail()
        {
            return ExceptField("email");
        }

        public AddressTypeQueryBuilder WithFirstName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("firstName", alias, new GraphQlDirective[] { include, skip });
        }

        public AddressTypeQueryBuilder ExceptFirstName()
        {
            return ExceptField("firstName");
        }

        public AddressTypeQueryBuilder WithKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("key", alias, new GraphQlDirective[] { include, skip });
        }

        public AddressTypeQueryBuilder ExceptKey()
        {
            return ExceptField("key");
        }

        public AddressTypeQueryBuilder WithLastName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastName", alias, new GraphQlDirective[] { include, skip });
        }

        public AddressTypeQueryBuilder ExceptLastName()
        {
            return ExceptField("lastName");
        }

        public AddressTypeQueryBuilder WithLine1(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("line1", alias, new GraphQlDirective[] { include, skip });
        }

        public AddressTypeQueryBuilder ExceptLine1()
        {
            return ExceptField("line1");
        }

        public AddressTypeQueryBuilder WithLine2(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("line2", alias, new GraphQlDirective[] { include, skip });
        }

        public AddressTypeQueryBuilder ExceptLine2()
        {
            return ExceptField("line2");
        }

        public AddressTypeQueryBuilder WithMiddleName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("middleName", alias, new GraphQlDirective[] { include, skip });
        }

        public AddressTypeQueryBuilder ExceptMiddleName()
        {
            return ExceptField("middleName");
        }

        public AddressTypeQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public AddressTypeQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public AddressTypeQueryBuilder WithOrganization(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("organization", alias, new GraphQlDirective[] { include, skip });
        }

        public AddressTypeQueryBuilder ExceptOrganization()
        {
            return ExceptField("organization");
        }

        public AddressTypeQueryBuilder WithPhone(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("phone", alias, new GraphQlDirective[] { include, skip });
        }

        public AddressTypeQueryBuilder ExceptPhone()
        {
            return ExceptField("phone");
        }

        public AddressTypeQueryBuilder WithPostalCode(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("postalCode", alias, new GraphQlDirective[] { include, skip });
        }

        public AddressTypeQueryBuilder ExceptPostalCode()
        {
            return ExceptField("postalCode");
        }

        public AddressTypeQueryBuilder WithRegionId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("regionId", alias, new GraphQlDirective[] { include, skip });
        }

        public AddressTypeQueryBuilder ExceptRegionId()
        {
            return ExceptField("regionId");
        }

        public AddressTypeQueryBuilder WithRegionName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("regionName", alias, new GraphQlDirective[] { include, skip });
        }

        public AddressTypeQueryBuilder ExceptRegionName()
        {
            return ExceptField("regionName");
        }

        public AddressTypeQueryBuilder WithZip(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("zip", alias, new GraphQlDirective[] { include, skip });
        }

        public AddressTypeQueryBuilder ExceptZip()
        {
            return ExceptField("zip");
        }
    }

    public class CartShipmentItemTypeQueryBuilder : GraphQlQueryBuilder<CartShipmentItemTypeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "lineItem", IsComplex = true, QueryBuilderType = typeof(LineItemTypeQueryBuilder) },
                new FieldMetadata { Name = "quantity" }
            };

        protected override string TypeName { get { return "CartShipmentItemType"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public CartShipmentItemTypeQueryBuilder WithLineItem(LineItemTypeQueryBuilder lineItemTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("lineItem", alias, lineItemTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CartShipmentItemTypeQueryBuilder ExceptLineItem()
        {
            return ExceptField("lineItem");
        }

        public CartShipmentItemTypeQueryBuilder WithQuantity(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("quantity", alias, new GraphQlDirective[] { include, skip });
        }

        public CartShipmentItemTypeQueryBuilder ExceptQuantity()
        {
            return ExceptField("quantity");
        }
    }

    public class LineItemTypeQueryBuilder : GraphQlQueryBuilder<LineItemTypeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "catalogId" },
                new FieldMetadata { Name = "categoryId" },
                new FieldMetadata { Name = "comment" },
                new FieldMetadata { Name = "createdDate", IsComplex = true },
                new FieldMetadata { Name = "discountAmount", IsComplex = true, QueryBuilderType = typeof(MoneyTypeQueryBuilder) },
                new FieldMetadata { Name = "discountAmountWithTax", IsComplex = true, QueryBuilderType = typeof(MoneyTypeQueryBuilder) },
                new FieldMetadata { Name = "discountTotal", IsComplex = true, QueryBuilderType = typeof(MoneyTypeQueryBuilder) },
                new FieldMetadata { Name = "discountTotalWithTax", IsComplex = true, QueryBuilderType = typeof(MoneyTypeQueryBuilder) },
                new FieldMetadata { Name = "extendedPrice", IsComplex = true, QueryBuilderType = typeof(MoneyTypeQueryBuilder) },
                new FieldMetadata { Name = "extendedPriceWithTax", IsComplex = true, QueryBuilderType = typeof(MoneyTypeQueryBuilder) },
                new FieldMetadata { Name = "height", IsComplex = true },
                new FieldMetadata { Name = "imageUrl" },
                new FieldMetadata { Name = "inStockQuantity" },
                new FieldMetadata { Name = "isGift" },
                new FieldMetadata { Name = "isReadOnly" },
                new FieldMetadata { Name = "isReccuring" },
                new FieldMetadata { Name = "isValid" },
                new FieldMetadata { Name = "languageCode" },
                new FieldMetadata { Name = "length", IsComplex = true },
                new FieldMetadata { Name = "listPrice", IsComplex = true, QueryBuilderType = typeof(MoneyTypeQueryBuilder) },
                new FieldMetadata { Name = "listPriceWithTax", IsComplex = true, QueryBuilderType = typeof(MoneyTypeQueryBuilder) },
                new FieldMetadata { Name = "measureUnit" },
                new FieldMetadata { Name = "name" },
                new FieldMetadata { Name = "objectType" },
                new FieldMetadata { Name = "paymentPlan", IsComplex = true, QueryBuilderType = typeof(MoneyTypeQueryBuilder) },
                new FieldMetadata { Name = "placedPrice", IsComplex = true, QueryBuilderType = typeof(MoneyTypeQueryBuilder) },
                new FieldMetadata { Name = "placedPriceWithTax", IsComplex = true, QueryBuilderType = typeof(MoneyTypeQueryBuilder) },
                new FieldMetadata { Name = "product", IsComplex = true, QueryBuilderType = typeof(ProductQueryBuilder) },
                new FieldMetadata { Name = "productId" },
                new FieldMetadata { Name = "productType" },
                new FieldMetadata { Name = "quantity" },
                new FieldMetadata { Name = "requiredShipping" },
                new FieldMetadata { Name = "salePrice", IsComplex = true, QueryBuilderType = typeof(MoneyTypeQueryBuilder) },
                new FieldMetadata { Name = "salePriceWithTax", IsComplex = true, QueryBuilderType = typeof(MoneyTypeQueryBuilder) },
                new FieldMetadata { Name = "shipmentMethodCode" },
                new FieldMetadata { Name = "sku" },
                new FieldMetadata { Name = "taxDetails", IsComplex = true, QueryBuilderType = typeof(TaxDetailTypeQueryBuilder) },
                new FieldMetadata { Name = "taxPercentRate", IsComplex = true },
                new FieldMetadata { Name = "taxTotal", IsComplex = true, QueryBuilderType = typeof(MoneyTypeQueryBuilder) },
                new FieldMetadata { Name = "taxType" },
                new FieldMetadata { Name = "thumbnailImageUrl" },
                new FieldMetadata { Name = "validationErrors", IsComplex = true, QueryBuilderType = typeof(ValidationErrorTypeQueryBuilder) },
                new FieldMetadata { Name = "volumetricWeight", IsComplex = true },
                new FieldMetadata { Name = "warehouseLocation" },
                new FieldMetadata { Name = "weight", IsComplex = true },
                new FieldMetadata { Name = "weightUnit" },
                new FieldMetadata { Name = "width", IsComplex = true }
            };

        protected override string TypeName { get { return "LineItemType"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public LineItemTypeQueryBuilder WithCatalogId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("catalogId", alias, new GraphQlDirective[] { include, skip });
        }

        public LineItemTypeQueryBuilder ExceptCatalogId()
        {
            return ExceptField("catalogId");
        }

        public LineItemTypeQueryBuilder WithCategoryId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("categoryId", alias, new GraphQlDirective[] { include, skip });
        }

        public LineItemTypeQueryBuilder ExceptCategoryId()
        {
            return ExceptField("categoryId");
        }

        public LineItemTypeQueryBuilder WithComment(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("comment", alias, new GraphQlDirective[] { include, skip });
        }

        public LineItemTypeQueryBuilder ExceptComment()
        {
            return ExceptField("comment");
        }

        public LineItemTypeQueryBuilder WithCreatedDate(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdDate", alias, new GraphQlDirective[] { include, skip });
        }

        public LineItemTypeQueryBuilder ExceptCreatedDate()
        {
            return ExceptField("createdDate");
        }

        public LineItemTypeQueryBuilder WithDiscountAmount(MoneyTypeQueryBuilder moneyTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("discountAmount", alias, moneyTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LineItemTypeQueryBuilder ExceptDiscountAmount()
        {
            return ExceptField("discountAmount");
        }

        public LineItemTypeQueryBuilder WithDiscountAmountWithTax(MoneyTypeQueryBuilder moneyTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("discountAmountWithTax", alias, moneyTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LineItemTypeQueryBuilder ExceptDiscountAmountWithTax()
        {
            return ExceptField("discountAmountWithTax");
        }

        public LineItemTypeQueryBuilder WithDiscountTotal(MoneyTypeQueryBuilder moneyTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("discountTotal", alias, moneyTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LineItemTypeQueryBuilder ExceptDiscountTotal()
        {
            return ExceptField("discountTotal");
        }

        public LineItemTypeQueryBuilder WithDiscountTotalWithTax(MoneyTypeQueryBuilder moneyTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("discountTotalWithTax", alias, moneyTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LineItemTypeQueryBuilder ExceptDiscountTotalWithTax()
        {
            return ExceptField("discountTotalWithTax");
        }

        public LineItemTypeQueryBuilder WithExtendedPrice(MoneyTypeQueryBuilder moneyTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("extendedPrice", alias, moneyTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LineItemTypeQueryBuilder ExceptExtendedPrice()
        {
            return ExceptField("extendedPrice");
        }

        public LineItemTypeQueryBuilder WithExtendedPriceWithTax(MoneyTypeQueryBuilder moneyTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("extendedPriceWithTax", alias, moneyTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LineItemTypeQueryBuilder ExceptExtendedPriceWithTax()
        {
            return ExceptField("extendedPriceWithTax");
        }

        public LineItemTypeQueryBuilder WithHeight(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("height", alias, new GraphQlDirective[] { include, skip });
        }

        public LineItemTypeQueryBuilder ExceptHeight()
        {
            return ExceptField("height");
        }

        public LineItemTypeQueryBuilder WithImageUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("imageUrl", alias, new GraphQlDirective[] { include, skip });
        }

        public LineItemTypeQueryBuilder ExceptImageUrl()
        {
            return ExceptField("imageUrl");
        }

        public LineItemTypeQueryBuilder WithInStockQuantity(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("inStockQuantity", alias, new GraphQlDirective[] { include, skip });
        }

        public LineItemTypeQueryBuilder ExceptInStockQuantity()
        {
            return ExceptField("inStockQuantity");
        }

        public LineItemTypeQueryBuilder WithIsGift(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isGift", alias, new GraphQlDirective[] { include, skip });
        }

        public LineItemTypeQueryBuilder ExceptIsGift()
        {
            return ExceptField("isGift");
        }

        public LineItemTypeQueryBuilder WithIsReadOnly(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isReadOnly", alias, new GraphQlDirective[] { include, skip });
        }

        public LineItemTypeQueryBuilder ExceptIsReadOnly()
        {
            return ExceptField("isReadOnly");
        }

        public LineItemTypeQueryBuilder WithIsReccuring(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isReccuring", alias, new GraphQlDirective[] { include, skip });
        }

        public LineItemTypeQueryBuilder ExceptIsReccuring()
        {
            return ExceptField("isReccuring");
        }

        public LineItemTypeQueryBuilder WithIsValid(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isValid", alias, new GraphQlDirective[] { include, skip });
        }

        public LineItemTypeQueryBuilder ExceptIsValid()
        {
            return ExceptField("isValid");
        }

        public LineItemTypeQueryBuilder WithLanguageCode(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("languageCode", alias, new GraphQlDirective[] { include, skip });
        }

        public LineItemTypeQueryBuilder ExceptLanguageCode()
        {
            return ExceptField("languageCode");
        }

        public LineItemTypeQueryBuilder WithLength(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("length", alias, new GraphQlDirective[] { include, skip });
        }

        public LineItemTypeQueryBuilder ExceptLength()
        {
            return ExceptField("length");
        }

        public LineItemTypeQueryBuilder WithListPrice(MoneyTypeQueryBuilder moneyTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("listPrice", alias, moneyTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LineItemTypeQueryBuilder ExceptListPrice()
        {
            return ExceptField("listPrice");
        }

        public LineItemTypeQueryBuilder WithListPriceWithTax(MoneyTypeQueryBuilder moneyTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("listPriceWithTax", alias, moneyTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LineItemTypeQueryBuilder ExceptListPriceWithTax()
        {
            return ExceptField("listPriceWithTax");
        }

        public LineItemTypeQueryBuilder WithMeasureUnit(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("measureUnit", alias, new GraphQlDirective[] { include, skip });
        }

        public LineItemTypeQueryBuilder ExceptMeasureUnit()
        {
            return ExceptField("measureUnit");
        }

        public LineItemTypeQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public LineItemTypeQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public LineItemTypeQueryBuilder WithObjectType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("objectType", alias, new GraphQlDirective[] { include, skip });
        }

        public LineItemTypeQueryBuilder ExceptObjectType()
        {
            return ExceptField("objectType");
        }

        public LineItemTypeQueryBuilder WithPaymentPlan(MoneyTypeQueryBuilder moneyTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("paymentPlan", alias, moneyTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LineItemTypeQueryBuilder ExceptPaymentPlan()
        {
            return ExceptField("paymentPlan");
        }

        public LineItemTypeQueryBuilder WithPlacedPrice(MoneyTypeQueryBuilder moneyTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("placedPrice", alias, moneyTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LineItemTypeQueryBuilder ExceptPlacedPrice()
        {
            return ExceptField("placedPrice");
        }

        public LineItemTypeQueryBuilder WithPlacedPriceWithTax(MoneyTypeQueryBuilder moneyTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("placedPriceWithTax", alias, moneyTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LineItemTypeQueryBuilder ExceptPlacedPriceWithTax()
        {
            return ExceptField("placedPriceWithTax");
        }

        public LineItemTypeQueryBuilder WithProduct(ProductQueryBuilder productQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("product", alias, productQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LineItemTypeQueryBuilder ExceptProduct()
        {
            return ExceptField("product");
        }

        public LineItemTypeQueryBuilder WithProductId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("productId", alias, new GraphQlDirective[] { include, skip });
        }

        public LineItemTypeQueryBuilder ExceptProductId()
        {
            return ExceptField("productId");
        }

        public LineItemTypeQueryBuilder WithProductType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("productType", alias, new GraphQlDirective[] { include, skip });
        }

        public LineItemTypeQueryBuilder ExceptProductType()
        {
            return ExceptField("productType");
        }

        public LineItemTypeQueryBuilder WithQuantity(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("quantity", alias, new GraphQlDirective[] { include, skip });
        }

        public LineItemTypeQueryBuilder ExceptQuantity()
        {
            return ExceptField("quantity");
        }

        public LineItemTypeQueryBuilder WithRequiredShipping(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("requiredShipping", alias, new GraphQlDirective[] { include, skip });
        }

        public LineItemTypeQueryBuilder ExceptRequiredShipping()
        {
            return ExceptField("requiredShipping");
        }

        public LineItemTypeQueryBuilder WithSalePrice(MoneyTypeQueryBuilder moneyTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("salePrice", alias, moneyTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LineItemTypeQueryBuilder ExceptSalePrice()
        {
            return ExceptField("salePrice");
        }

        public LineItemTypeQueryBuilder WithSalePriceWithTax(MoneyTypeQueryBuilder moneyTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("salePriceWithTax", alias, moneyTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LineItemTypeQueryBuilder ExceptSalePriceWithTax()
        {
            return ExceptField("salePriceWithTax");
        }

        public LineItemTypeQueryBuilder WithShipmentMethodCode(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("shipmentMethodCode", alias, new GraphQlDirective[] { include, skip });
        }

        public LineItemTypeQueryBuilder ExceptShipmentMethodCode()
        {
            return ExceptField("shipmentMethodCode");
        }

        public LineItemTypeQueryBuilder WithSku(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("sku", alias, new GraphQlDirective[] { include, skip });
        }

        public LineItemTypeQueryBuilder ExceptSku()
        {
            return ExceptField("sku");
        }

        public LineItemTypeQueryBuilder WithTaxDetails(TaxDetailTypeQueryBuilder taxDetailTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("taxDetails", alias, taxDetailTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LineItemTypeQueryBuilder ExceptTaxDetails()
        {
            return ExceptField("taxDetails");
        }

        public LineItemTypeQueryBuilder WithTaxPercentRate(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("taxPercentRate", alias, new GraphQlDirective[] { include, skip });
        }

        public LineItemTypeQueryBuilder ExceptTaxPercentRate()
        {
            return ExceptField("taxPercentRate");
        }

        public LineItemTypeQueryBuilder WithTaxTotal(MoneyTypeQueryBuilder moneyTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("taxTotal", alias, moneyTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LineItemTypeQueryBuilder ExceptTaxTotal()
        {
            return ExceptField("taxTotal");
        }

        public LineItemTypeQueryBuilder WithTaxType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("taxType", alias, new GraphQlDirective[] { include, skip });
        }

        public LineItemTypeQueryBuilder ExceptTaxType()
        {
            return ExceptField("taxType");
        }

        public LineItemTypeQueryBuilder WithThumbnailImageUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("thumbnailImageUrl", alias, new GraphQlDirective[] { include, skip });
        }

        public LineItemTypeQueryBuilder ExceptThumbnailImageUrl()
        {
            return ExceptField("thumbnailImageUrl");
        }

        public LineItemTypeQueryBuilder WithValidationErrors(ValidationErrorTypeQueryBuilder validationErrorTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("validationErrors", alias, validationErrorTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LineItemTypeQueryBuilder ExceptValidationErrors()
        {
            return ExceptField("validationErrors");
        }

        public LineItemTypeQueryBuilder WithVolumetricWeight(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("volumetricWeight", alias, new GraphQlDirective[] { include, skip });
        }

        public LineItemTypeQueryBuilder ExceptVolumetricWeight()
        {
            return ExceptField("volumetricWeight");
        }

        public LineItemTypeQueryBuilder WithWarehouseLocation(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("warehouseLocation", alias, new GraphQlDirective[] { include, skip });
        }

        public LineItemTypeQueryBuilder ExceptWarehouseLocation()
        {
            return ExceptField("warehouseLocation");
        }

        public LineItemTypeQueryBuilder WithWeight(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("weight", alias, new GraphQlDirective[] { include, skip });
        }

        public LineItemTypeQueryBuilder ExceptWeight()
        {
            return ExceptField("weight");
        }

        public LineItemTypeQueryBuilder WithWeightUnit(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("weightUnit", alias, new GraphQlDirective[] { include, skip });
        }

        public LineItemTypeQueryBuilder ExceptWeightUnit()
        {
            return ExceptField("weightUnit");
        }

        public LineItemTypeQueryBuilder WithWidth(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("width", alias, new GraphQlDirective[] { include, skip });
        }

        public LineItemTypeQueryBuilder ExceptWidth()
        {
            return ExceptField("width");
        }
    }

    public class ProductQueryBuilder : GraphQlQueryBuilder<ProductQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "associations", IsComplex = true, QueryBuilderType = typeof(ProductAssociationConnectionQueryBuilder) },
                new FieldMetadata { Name = "code" },
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "imgSrc" },
                new FieldMetadata { Name = "name" },
                new FieldMetadata { Name = "outerId" },
                new FieldMetadata { Name = "prices", IsComplex = true, QueryBuilderType = typeof(PriceTypeQueryBuilder) },
                new FieldMetadata { Name = "productType" },
                new FieldMetadata { Name = "properties", IsComplex = true, QueryBuilderType = typeof(PropertyQueryBuilder) }
            };

        protected override string TypeName { get { return "Product"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public ProductQueryBuilder WithAssociations(ProductAssociationConnectionQueryBuilder productAssociationConnectionQueryBuilder, QueryBuilderParameter<string> after = null, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<string> query = null, QueryBuilderParameter<string> group = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (after != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "after", ArgumentValue = after });

            if (first != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "first", ArgumentValue = first });

            if (query != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "query", ArgumentValue = query });

            if (group != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "group", ArgumentValue = group });

            return WithObjectField("associations", alias, productAssociationConnectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ProductQueryBuilder ExceptAssociations()
        {
            return ExceptField("associations");
        }

        public ProductQueryBuilder WithCode(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("code", alias, new GraphQlDirective[] { include, skip });
        }

        public ProductQueryBuilder ExceptCode()
        {
            return ExceptField("code");
        }

        public ProductQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ProductQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public ProductQueryBuilder WithImgSrc(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("imgSrc", alias, new GraphQlDirective[] { include, skip });
        }

        public ProductQueryBuilder ExceptImgSrc()
        {
            return ExceptField("imgSrc");
        }

        public ProductQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public ProductQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public ProductQueryBuilder WithOuterId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("outerId", alias, new GraphQlDirective[] { include, skip });
        }

        public ProductQueryBuilder ExceptOuterId()
        {
            return ExceptField("outerId");
        }

        public ProductQueryBuilder WithPrices(PriceTypeQueryBuilder priceTypeQueryBuilder, QueryBuilderParameter<string> currency = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (currency != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "currency", ArgumentValue = currency });

            return WithObjectField("prices", alias, priceTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ProductQueryBuilder ExceptPrices()
        {
            return ExceptField("prices");
        }

        public ProductQueryBuilder WithProductType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("productType", alias, new GraphQlDirective[] { include, skip });
        }

        public ProductQueryBuilder ExceptProductType()
        {
            return ExceptField("productType");
        }

        public ProductQueryBuilder WithProperties(PropertyQueryBuilder propertyQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("properties", alias, propertyQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ProductQueryBuilder ExceptProperties()
        {
            return ExceptField("properties");
        }
    }

    public class PropertyQueryBuilder : GraphQlQueryBuilder<PropertyQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "name" },
                new FieldMetadata { Name = "type" },
                new FieldMetadata { Name = "values", IsComplex = true }
            };

        protected override string TypeName { get { return "Property"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public PropertyQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public PropertyQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public PropertyQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public PropertyQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public PropertyQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public PropertyQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }

        public PropertyQueryBuilder WithValues(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("values", alias, new GraphQlDirective[] { include, skip });
        }

        public PropertyQueryBuilder ExceptValues()
        {
            return ExceptField("values");
        }
    }

    public class PriceTypeQueryBuilder : GraphQlQueryBuilder<PriceTypeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "currency" },
                new FieldMetadata { Name = "endDate", IsComplex = true },
                new FieldMetadata { Name = "list", IsComplex = true },
                new FieldMetadata { Name = "minQuantity" },
                new FieldMetadata { Name = "pricelistId" },
                new FieldMetadata { Name = "sale", IsComplex = true },
                new FieldMetadata { Name = "startDate", IsComplex = true }
            };

        protected override string TypeName { get { return "PriceType"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public PriceTypeQueryBuilder WithCurrency(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("currency", alias, new GraphQlDirective[] { include, skip });
        }

        public PriceTypeQueryBuilder ExceptCurrency()
        {
            return ExceptField("currency");
        }

        public PriceTypeQueryBuilder WithEndDate(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("endDate", alias, new GraphQlDirective[] { include, skip });
        }

        public PriceTypeQueryBuilder ExceptEndDate()
        {
            return ExceptField("endDate");
        }

        public PriceTypeQueryBuilder WithList(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("list", alias, new GraphQlDirective[] { include, skip });
        }

        public PriceTypeQueryBuilder ExceptList()
        {
            return ExceptField("list");
        }

        public PriceTypeQueryBuilder WithMinQuantity(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("minQuantity", alias, new GraphQlDirective[] { include, skip });
        }

        public PriceTypeQueryBuilder ExceptMinQuantity()
        {
            return ExceptField("minQuantity");
        }

        public PriceTypeQueryBuilder WithPricelistId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("pricelistId", alias, new GraphQlDirective[] { include, skip });
        }

        public PriceTypeQueryBuilder ExceptPricelistId()
        {
            return ExceptField("pricelistId");
        }

        public PriceTypeQueryBuilder WithSale(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("sale", alias, new GraphQlDirective[] { include, skip });
        }

        public PriceTypeQueryBuilder ExceptSale()
        {
            return ExceptField("sale");
        }

        public PriceTypeQueryBuilder WithStartDate(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("startDate", alias, new GraphQlDirective[] { include, skip });
        }

        public PriceTypeQueryBuilder ExceptStartDate()
        {
            return ExceptField("startDate");
        }
    }

    public class ProductAssociationConnectionQueryBuilder : GraphQlQueryBuilder<ProductAssociationConnectionQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "edges", IsComplex = true, QueryBuilderType = typeof(ProductAssociationEdgeQueryBuilder) },
                new FieldMetadata { Name = "items", IsComplex = true, QueryBuilderType = typeof(ProductAssociationQueryBuilder) },
                new FieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PageInfoQueryBuilder) },
                new FieldMetadata { Name = "totalCount" }
            };

        protected override string TypeName { get { return "ProductAssociationConnection"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public ProductAssociationConnectionQueryBuilder WithEdges(ProductAssociationEdgeQueryBuilder productAssociationEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("edges", alias, productAssociationEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ProductAssociationConnectionQueryBuilder ExceptEdges()
        {
            return ExceptField("edges");
        }

        public ProductAssociationConnectionQueryBuilder WithItems(ProductAssociationQueryBuilder productAssociationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("items", alias, productAssociationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ProductAssociationConnectionQueryBuilder ExceptItems()
        {
            return ExceptField("items");
        }

        public ProductAssociationConnectionQueryBuilder WithPageInfo(PageInfoQueryBuilder pageInfoQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, pageInfoQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ProductAssociationConnectionQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }

        public ProductAssociationConnectionQueryBuilder WithTotalCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("totalCount", alias, new GraphQlDirective[] { include, skip });
        }

        public ProductAssociationConnectionQueryBuilder ExceptTotalCount()
        {
            return ExceptField("totalCount");
        }
    }

    public class PageInfoQueryBuilder : GraphQlQueryBuilder<PageInfoQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "endCursor" },
                new FieldMetadata { Name = "hasNextPage" },
                new FieldMetadata { Name = "hasPreviousPage" },
                new FieldMetadata { Name = "startCursor" }
            };

        protected override string TypeName { get { return "PageInfo"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public PageInfoQueryBuilder WithEndCursor(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("endCursor", alias, new GraphQlDirective[] { include, skip });
        }

        public PageInfoQueryBuilder ExceptEndCursor()
        {
            return ExceptField("endCursor");
        }

        public PageInfoQueryBuilder WithHasNextPage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("hasNextPage", alias, new GraphQlDirective[] { include, skip });
        }

        public PageInfoQueryBuilder ExceptHasNextPage()
        {
            return ExceptField("hasNextPage");
        }

        public PageInfoQueryBuilder WithHasPreviousPage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("hasPreviousPage", alias, new GraphQlDirective[] { include, skip });
        }

        public PageInfoQueryBuilder ExceptHasPreviousPage()
        {
            return ExceptField("hasPreviousPage");
        }

        public PageInfoQueryBuilder WithStartCursor(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("startCursor", alias, new GraphQlDirective[] { include, skip });
        }

        public PageInfoQueryBuilder ExceptStartCursor()
        {
            return ExceptField("startCursor");
        }
    }

    public class ProductAssociationEdgeQueryBuilder : GraphQlQueryBuilder<ProductAssociationEdgeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "cursor" },
                new FieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(ProductAssociationQueryBuilder) }
            };

        protected override string TypeName { get { return "ProductAssociationEdge"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public ProductAssociationEdgeQueryBuilder WithCursor(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("cursor", alias, new GraphQlDirective[] { include, skip });
        }

        public ProductAssociationEdgeQueryBuilder ExceptCursor()
        {
            return ExceptField("cursor");
        }

        public ProductAssociationEdgeQueryBuilder WithNode(ProductAssociationQueryBuilder productAssociationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("node", alias, productAssociationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ProductAssociationEdgeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }
    }

    public class ProductAssociationQueryBuilder : GraphQlQueryBuilder<ProductAssociationQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "associatedObjectId" },
                new FieldMetadata { Name = "associatedObjectType" },
                new FieldMetadata { Name = "priority" },
                new FieldMetadata { Name = "product", IsComplex = true, QueryBuilderType = typeof(ProductQueryBuilder) },
                new FieldMetadata { Name = "quantity" },
                new FieldMetadata { Name = "type" }
            };

        protected override string TypeName { get { return "ProductAssociation"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public ProductAssociationQueryBuilder WithAssociatedObjectId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("associatedObjectId", alias, new GraphQlDirective[] { include, skip });
        }

        public ProductAssociationQueryBuilder ExceptAssociatedObjectId()
        {
            return ExceptField("associatedObjectId");
        }

        public ProductAssociationQueryBuilder WithAssociatedObjectType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("associatedObjectType", alias, new GraphQlDirective[] { include, skip });
        }

        public ProductAssociationQueryBuilder ExceptAssociatedObjectType()
        {
            return ExceptField("associatedObjectType");
        }

        public ProductAssociationQueryBuilder WithPriority(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("priority", alias, new GraphQlDirective[] { include, skip });
        }

        public ProductAssociationQueryBuilder ExceptPriority()
        {
            return ExceptField("priority");
        }

        public ProductAssociationQueryBuilder WithProduct(ProductQueryBuilder productQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("product", alias, productQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ProductAssociationQueryBuilder ExceptProduct()
        {
            return ExceptField("product");
        }

        public ProductAssociationQueryBuilder WithQuantity(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("quantity", alias, new GraphQlDirective[] { include, skip });
        }

        public ProductAssociationQueryBuilder ExceptQuantity()
        {
            return ExceptField("quantity");
        }

        public ProductAssociationQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public ProductAssociationQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }
    }

    public class ValidationErrorTypeQueryBuilder : GraphQlQueryBuilder<ValidationErrorTypeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "errorCode" }
            };

        protected override string TypeName { get { return "ValidationErrorType"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public ValidationErrorTypeQueryBuilder WithErrorCode(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("errorCode", alias, new GraphQlDirective[] { include, skip });
        }

        public ValidationErrorTypeQueryBuilder ExceptErrorCode()
        {
            return ExceptField("errorCode");
        }
    }

    public class DiscountTypeQueryBuilder : GraphQlQueryBuilder<DiscountTypeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "amount", IsComplex = true, QueryBuilderType = typeof(MoneyTypeQueryBuilder) },
                new FieldMetadata { Name = "coupon" },
                new FieldMetadata { Name = "description" },
                new FieldMetadata { Name = "promotionId" }
            };

        protected override string TypeName { get { return "DiscountType"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public DiscountTypeQueryBuilder WithAmount(MoneyTypeQueryBuilder moneyTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("amount", alias, moneyTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DiscountTypeQueryBuilder ExceptAmount()
        {
            return ExceptField("amount");
        }

        public DiscountTypeQueryBuilder WithCoupon(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("coupon", alias, new GraphQlDirective[] { include, skip });
        }

        public DiscountTypeQueryBuilder ExceptCoupon()
        {
            return ExceptField("coupon");
        }

        public DiscountTypeQueryBuilder WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("description", alias, new GraphQlDirective[] { include, skip });
        }

        public DiscountTypeQueryBuilder ExceptDescription()
        {
            return ExceptField("description");
        }

        public DiscountTypeQueryBuilder WithPromotionId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("promotionId", alias, new GraphQlDirective[] { include, skip });
        }

        public DiscountTypeQueryBuilder ExceptPromotionId()
        {
            return ExceptField("promotionId");
        }
    }

    public class PaymentTypeQueryBuilder : GraphQlQueryBuilder<PaymentTypeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "amount", IsComplex = true, QueryBuilderType = typeof(MoneyTypeQueryBuilder) },
                new FieldMetadata { Name = "billingAddress", IsComplex = true, QueryBuilderType = typeof(AddressTypeQueryBuilder) },
                new FieldMetadata { Name = "currency", IsComplex = true, QueryBuilderType = typeof(CurrencyTypeQueryBuilder) },
                new FieldMetadata { Name = "discountAmount", IsComplex = true, QueryBuilderType = typeof(MoneyTypeQueryBuilder) },
                new FieldMetadata { Name = "discountAmountWithTax", IsComplex = true, QueryBuilderType = typeof(MoneyTypeQueryBuilder) },
                new FieldMetadata { Name = "discounts", IsComplex = true, QueryBuilderType = typeof(DiscountTypeQueryBuilder) },
                new FieldMetadata { Name = "outerId" },
                new FieldMetadata { Name = "paymentGatewayCode" },
                new FieldMetadata { Name = "price", IsComplex = true, QueryBuilderType = typeof(MoneyTypeQueryBuilder) },
                new FieldMetadata { Name = "priceWithTax", IsComplex = true, QueryBuilderType = typeof(MoneyTypeQueryBuilder) },
                new FieldMetadata { Name = "taxDetails", IsComplex = true, QueryBuilderType = typeof(TaxDetailTypeQueryBuilder) },
                new FieldMetadata { Name = "taxPercentRate", IsComplex = true },
                new FieldMetadata { Name = "taxTotal", IsComplex = true, QueryBuilderType = typeof(MoneyTypeQueryBuilder) },
                new FieldMetadata { Name = "taxType" },
                new FieldMetadata { Name = "total", IsComplex = true, QueryBuilderType = typeof(MoneyTypeQueryBuilder) },
                new FieldMetadata { Name = "totalWithTax", IsComplex = true, QueryBuilderType = typeof(MoneyTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "PaymentType"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public PaymentTypeQueryBuilder WithAmount(MoneyTypeQueryBuilder moneyTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("amount", alias, moneyTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PaymentTypeQueryBuilder ExceptAmount()
        {
            return ExceptField("amount");
        }

        public PaymentTypeQueryBuilder WithBillingAddress(AddressTypeQueryBuilder addressTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("billingAddress", alias, addressTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PaymentTypeQueryBuilder ExceptBillingAddress()
        {
            return ExceptField("billingAddress");
        }

        public PaymentTypeQueryBuilder WithCurrency(CurrencyTypeQueryBuilder currencyTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("currency", alias, currencyTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PaymentTypeQueryBuilder ExceptCurrency()
        {
            return ExceptField("currency");
        }

        public PaymentTypeQueryBuilder WithDiscountAmount(MoneyTypeQueryBuilder moneyTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("discountAmount", alias, moneyTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PaymentTypeQueryBuilder ExceptDiscountAmount()
        {
            return ExceptField("discountAmount");
        }

        public PaymentTypeQueryBuilder WithDiscountAmountWithTax(MoneyTypeQueryBuilder moneyTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("discountAmountWithTax", alias, moneyTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PaymentTypeQueryBuilder ExceptDiscountAmountWithTax()
        {
            return ExceptField("discountAmountWithTax");
        }

        public PaymentTypeQueryBuilder WithDiscounts(DiscountTypeQueryBuilder discountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("discounts", alias, discountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PaymentTypeQueryBuilder ExceptDiscounts()
        {
            return ExceptField("discounts");
        }

        public PaymentTypeQueryBuilder WithOuterId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("outerId", alias, new GraphQlDirective[] { include, skip });
        }

        public PaymentTypeQueryBuilder ExceptOuterId()
        {
            return ExceptField("outerId");
        }

        public PaymentTypeQueryBuilder WithPaymentGatewayCode(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("paymentGatewayCode", alias, new GraphQlDirective[] { include, skip });
        }

        public PaymentTypeQueryBuilder ExceptPaymentGatewayCode()
        {
            return ExceptField("paymentGatewayCode");
        }

        public PaymentTypeQueryBuilder WithPrice(MoneyTypeQueryBuilder moneyTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("price", alias, moneyTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PaymentTypeQueryBuilder ExceptPrice()
        {
            return ExceptField("price");
        }

        public PaymentTypeQueryBuilder WithPriceWithTax(MoneyTypeQueryBuilder moneyTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("priceWithTax", alias, moneyTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PaymentTypeQueryBuilder ExceptPriceWithTax()
        {
            return ExceptField("priceWithTax");
        }

        public PaymentTypeQueryBuilder WithTaxDetails(TaxDetailTypeQueryBuilder taxDetailTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("taxDetails", alias, taxDetailTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PaymentTypeQueryBuilder ExceptTaxDetails()
        {
            return ExceptField("taxDetails");
        }

        public PaymentTypeQueryBuilder WithTaxPercentRate(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("taxPercentRate", alias, new GraphQlDirective[] { include, skip });
        }

        public PaymentTypeQueryBuilder ExceptTaxPercentRate()
        {
            return ExceptField("taxPercentRate");
        }

        public PaymentTypeQueryBuilder WithTaxTotal(MoneyTypeQueryBuilder moneyTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("taxTotal", alias, moneyTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PaymentTypeQueryBuilder ExceptTaxTotal()
        {
            return ExceptField("taxTotal");
        }

        public PaymentTypeQueryBuilder WithTaxType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("taxType", alias, new GraphQlDirective[] { include, skip });
        }

        public PaymentTypeQueryBuilder ExceptTaxType()
        {
            return ExceptField("taxType");
        }

        public PaymentTypeQueryBuilder WithTotal(MoneyTypeQueryBuilder moneyTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("total", alias, moneyTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PaymentTypeQueryBuilder ExceptTotal()
        {
            return ExceptField("total");
        }

        public PaymentTypeQueryBuilder WithTotalWithTax(MoneyTypeQueryBuilder moneyTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("totalWithTax", alias, moneyTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PaymentTypeQueryBuilder ExceptTotalWithTax()
        {
            return ExceptField("totalWithTax");
        }
    }

    public class PaymentMethodTypeQueryBuilder : GraphQlQueryBuilder<PaymentMethodTypeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "code" },
                new FieldMetadata { Name = "currency", IsComplex = true, QueryBuilderType = typeof(CurrencyTypeQueryBuilder) },
                new FieldMetadata { Name = "description" },
                new FieldMetadata { Name = "discountAmount", IsComplex = true, QueryBuilderType = typeof(MoneyTypeQueryBuilder) },
                new FieldMetadata { Name = "discountAmountWithTax", IsComplex = true, QueryBuilderType = typeof(MoneyTypeQueryBuilder) },
                new FieldMetadata { Name = "discounts", IsComplex = true, QueryBuilderType = typeof(DiscountTypeQueryBuilder) },
                new FieldMetadata { Name = "isAvailableForPartial" },
                new FieldMetadata { Name = "logoUrl" },
                new FieldMetadata { Name = "paymentMethodGroupType" },
                new FieldMetadata { Name = "paymentMethodType" },
                new FieldMetadata { Name = "price", IsComplex = true, QueryBuilderType = typeof(MoneyTypeQueryBuilder) },
                new FieldMetadata { Name = "priceWithTax", IsComplex = true, QueryBuilderType = typeof(MoneyTypeQueryBuilder) },
                new FieldMetadata { Name = "priority" },
                new FieldMetadata { Name = "settings", IsComplex = true, QueryBuilderType = typeof(SettingTypeQueryBuilder) },
                new FieldMetadata { Name = "taxDetails", IsComplex = true, QueryBuilderType = typeof(TaxDetailTypeQueryBuilder) },
                new FieldMetadata { Name = "taxPercentRate", IsComplex = true },
                new FieldMetadata { Name = "taxTotal", IsComplex = true, QueryBuilderType = typeof(MoneyTypeQueryBuilder) },
                new FieldMetadata { Name = "taxType" },
                new FieldMetadata { Name = "total", IsComplex = true, QueryBuilderType = typeof(MoneyTypeQueryBuilder) },
                new FieldMetadata { Name = "totalWithTax", IsComplex = true, QueryBuilderType = typeof(MoneyTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "PaymentMethodType"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public PaymentMethodTypeQueryBuilder WithCode(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("code", alias, new GraphQlDirective[] { include, skip });
        }

        public PaymentMethodTypeQueryBuilder ExceptCode()
        {
            return ExceptField("code");
        }

        public PaymentMethodTypeQueryBuilder WithCurrency(CurrencyTypeQueryBuilder currencyTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("currency", alias, currencyTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PaymentMethodTypeQueryBuilder ExceptCurrency()
        {
            return ExceptField("currency");
        }

        public PaymentMethodTypeQueryBuilder WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("description", alias, new GraphQlDirective[] { include, skip });
        }

        public PaymentMethodTypeQueryBuilder ExceptDescription()
        {
            return ExceptField("description");
        }

        public PaymentMethodTypeQueryBuilder WithDiscountAmount(MoneyTypeQueryBuilder moneyTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("discountAmount", alias, moneyTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PaymentMethodTypeQueryBuilder ExceptDiscountAmount()
        {
            return ExceptField("discountAmount");
        }

        public PaymentMethodTypeQueryBuilder WithDiscountAmountWithTax(MoneyTypeQueryBuilder moneyTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("discountAmountWithTax", alias, moneyTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PaymentMethodTypeQueryBuilder ExceptDiscountAmountWithTax()
        {
            return ExceptField("discountAmountWithTax");
        }

        public PaymentMethodTypeQueryBuilder WithDiscounts(DiscountTypeQueryBuilder discountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("discounts", alias, discountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PaymentMethodTypeQueryBuilder ExceptDiscounts()
        {
            return ExceptField("discounts");
        }

        public PaymentMethodTypeQueryBuilder WithIsAvailableForPartial(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isAvailableForPartial", alias, new GraphQlDirective[] { include, skip });
        }

        public PaymentMethodTypeQueryBuilder ExceptIsAvailableForPartial()
        {
            return ExceptField("isAvailableForPartial");
        }

        public PaymentMethodTypeQueryBuilder WithLogoUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("logoUrl", alias, new GraphQlDirective[] { include, skip });
        }

        public PaymentMethodTypeQueryBuilder ExceptLogoUrl()
        {
            return ExceptField("logoUrl");
        }

        public PaymentMethodTypeQueryBuilder WithPaymentMethodGroupType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("paymentMethodGroupType", alias, new GraphQlDirective[] { include, skip });
        }

        public PaymentMethodTypeQueryBuilder ExceptPaymentMethodGroupType()
        {
            return ExceptField("paymentMethodGroupType");
        }

        public PaymentMethodTypeQueryBuilder WithPaymentMethodType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("paymentMethodType", alias, new GraphQlDirective[] { include, skip });
        }

        public PaymentMethodTypeQueryBuilder ExceptPaymentMethodType()
        {
            return ExceptField("paymentMethodType");
        }

        public PaymentMethodTypeQueryBuilder WithPrice(MoneyTypeQueryBuilder moneyTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("price", alias, moneyTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PaymentMethodTypeQueryBuilder ExceptPrice()
        {
            return ExceptField("price");
        }

        public PaymentMethodTypeQueryBuilder WithPriceWithTax(MoneyTypeQueryBuilder moneyTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("priceWithTax", alias, moneyTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PaymentMethodTypeQueryBuilder ExceptPriceWithTax()
        {
            return ExceptField("priceWithTax");
        }

        public PaymentMethodTypeQueryBuilder WithPriority(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("priority", alias, new GraphQlDirective[] { include, skip });
        }

        public PaymentMethodTypeQueryBuilder ExceptPriority()
        {
            return ExceptField("priority");
        }

        public PaymentMethodTypeQueryBuilder WithSettings(SettingTypeQueryBuilder settingTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("settings", alias, settingTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PaymentMethodTypeQueryBuilder ExceptSettings()
        {
            return ExceptField("settings");
        }

        public PaymentMethodTypeQueryBuilder WithTaxDetails(TaxDetailTypeQueryBuilder taxDetailTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("taxDetails", alias, taxDetailTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PaymentMethodTypeQueryBuilder ExceptTaxDetails()
        {
            return ExceptField("taxDetails");
        }

        public PaymentMethodTypeQueryBuilder WithTaxPercentRate(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("taxPercentRate", alias, new GraphQlDirective[] { include, skip });
        }

        public PaymentMethodTypeQueryBuilder ExceptTaxPercentRate()
        {
            return ExceptField("taxPercentRate");
        }

        public PaymentMethodTypeQueryBuilder WithTaxTotal(MoneyTypeQueryBuilder moneyTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("taxTotal", alias, moneyTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PaymentMethodTypeQueryBuilder ExceptTaxTotal()
        {
            return ExceptField("taxTotal");
        }

        public PaymentMethodTypeQueryBuilder WithTaxType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("taxType", alias, new GraphQlDirective[] { include, skip });
        }

        public PaymentMethodTypeQueryBuilder ExceptTaxType()
        {
            return ExceptField("taxType");
        }

        public PaymentMethodTypeQueryBuilder WithTotal(MoneyTypeQueryBuilder moneyTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("total", alias, moneyTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PaymentMethodTypeQueryBuilder ExceptTotal()
        {
            return ExceptField("total");
        }

        public PaymentMethodTypeQueryBuilder WithTotalWithTax(MoneyTypeQueryBuilder moneyTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("totalWithTax", alias, moneyTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PaymentMethodTypeQueryBuilder ExceptTotalWithTax()
        {
            return ExceptField("totalWithTax");
        }
    }

    public class SettingTypeQueryBuilder : GraphQlQueryBuilder<SettingTypeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "name" },
                new FieldMetadata { Name = "value", IsComplex = true, QueryBuilderType = typeof(QueryQueryBuilder) },
                new FieldMetadata { Name = "valueType" }
            };

        protected override string TypeName { get { return "SettingType"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public SettingTypeQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingTypeQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public SettingTypeQueryBuilder WithValue(QueryQueryBuilder queryQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("value", alias, queryQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SettingTypeQueryBuilder ExceptValue()
        {
            return ExceptField("value");
        }

        public SettingTypeQueryBuilder WithValueType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("valueType", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingTypeQueryBuilder ExceptValueType()
        {
            return ExceptField("valueType");
        }
    }

    public class PaymentPlanTypeQueryBuilder : GraphQlQueryBuilder<PaymentPlanTypeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new FieldMetadata[]
            {
            };

        protected override string TypeName { get { return "PaymentPlanType"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

    }

    public class CopuponTypeQueryBuilder : GraphQlQueryBuilder<CopuponTypeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "appliedSuccessfully" },
                new FieldMetadata { Name = "code" },
                new FieldMetadata { Name = "description" },
                new FieldMetadata { Name = "errorCode" }
            };

        protected override string TypeName { get { return "CopuponType"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public CopuponTypeQueryBuilder WithAppliedSuccessfully(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("appliedSuccessfully", alias, new GraphQlDirective[] { include, skip });
        }

        public CopuponTypeQueryBuilder ExceptAppliedSuccessfully()
        {
            return ExceptField("appliedSuccessfully");
        }

        public CopuponTypeQueryBuilder WithCode(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("code", alias, new GraphQlDirective[] { include, skip });
        }

        public CopuponTypeQueryBuilder ExceptCode()
        {
            return ExceptField("code");
        }

        public CopuponTypeQueryBuilder WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("description", alias, new GraphQlDirective[] { include, skip });
        }

        public CopuponTypeQueryBuilder ExceptDescription()
        {
            return ExceptField("description");
        }

        public CopuponTypeQueryBuilder WithErrorCode(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("errorCode", alias, new GraphQlDirective[] { include, skip });
        }

        public CopuponTypeQueryBuilder ExceptErrorCode()
        {
            return ExceptField("errorCode");
        }
    }

    public class ProductConnectionQueryBuilder : GraphQlQueryBuilder<ProductConnectionQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "edges", IsComplex = true, QueryBuilderType = typeof(ProductEdgeQueryBuilder) },
                new FieldMetadata { Name = "filter_facets", IsComplex = true, QueryBuilderType = typeof(FilterFacetQueryBuilder) },
                new FieldMetadata { Name = "items", IsComplex = true, QueryBuilderType = typeof(ProductQueryBuilder) },
                new FieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PageInfoQueryBuilder) },
                new FieldMetadata { Name = "range_facets", IsComplex = true, QueryBuilderType = typeof(RangeFacetQueryBuilder) },
                new FieldMetadata { Name = "term_facets", IsComplex = true, QueryBuilderType = typeof(TermFacetQueryBuilder) },
                new FieldMetadata { Name = "totalCount" }
            };

        protected override string TypeName { get { return "ProductConnection"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public ProductConnectionQueryBuilder WithEdges(ProductEdgeQueryBuilder productEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("edges", alias, productEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ProductConnectionQueryBuilder ExceptEdges()
        {
            return ExceptField("edges");
        }

        public ProductConnectionQueryBuilder WithFilterFacets(FilterFacetQueryBuilder filterFacetQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("filter_facets", alias, filterFacetQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ProductConnectionQueryBuilder ExceptFilterFacets()
        {
            return ExceptField("filter_facets");
        }

        public ProductConnectionQueryBuilder WithItems(ProductQueryBuilder productQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("items", alias, productQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ProductConnectionQueryBuilder ExceptItems()
        {
            return ExceptField("items");
        }

        public ProductConnectionQueryBuilder WithPageInfo(PageInfoQueryBuilder pageInfoQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, pageInfoQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ProductConnectionQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }

        public ProductConnectionQueryBuilder WithRangeFacets(RangeFacetQueryBuilder rangeFacetQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("range_facets", alias, rangeFacetQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ProductConnectionQueryBuilder ExceptRangeFacets()
        {
            return ExceptField("range_facets");
        }

        public ProductConnectionQueryBuilder WithTermFacets(TermFacetQueryBuilder termFacetQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("term_facets", alias, termFacetQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ProductConnectionQueryBuilder ExceptTermFacets()
        {
            return ExceptField("term_facets");
        }

        public ProductConnectionQueryBuilder WithTotalCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("totalCount", alias, new GraphQlDirective[] { include, skip });
        }

        public ProductConnectionQueryBuilder ExceptTotalCount()
        {
            return ExceptField("totalCount");
        }
    }

    public class ProductEdgeQueryBuilder : GraphQlQueryBuilder<ProductEdgeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "cursor" },
                new FieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(ProductQueryBuilder) }
            };

        protected override string TypeName { get { return "ProductEdge"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public ProductEdgeQueryBuilder WithCursor(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("cursor", alias, new GraphQlDirective[] { include, skip });
        }

        public ProductEdgeQueryBuilder ExceptCursor()
        {
            return ExceptField("cursor");
        }

        public ProductEdgeQueryBuilder WithNode(ProductQueryBuilder productQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("node", alias, productQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ProductEdgeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }
    }

    public class FilterFacetQueryBuilder : GraphQlQueryBuilder<FilterFacetQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "count" },
                new FieldMetadata { Name = "facetType" },
                new FieldMetadata { Name = "name" }
            };

        protected override string TypeName { get { return "FilterFacet"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public FilterFacetQueryBuilder WithCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("count", alias, new GraphQlDirective[] { include, skip });
        }

        public FilterFacetQueryBuilder ExceptCount()
        {
            return ExceptField("count");
        }

        public FilterFacetQueryBuilder WithFacetType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("facetType", alias, new GraphQlDirective[] { include, skip });
        }

        public FilterFacetQueryBuilder ExceptFacetType()
        {
            return ExceptField("facetType");
        }

        public FilterFacetQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public FilterFacetQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }
    }

    public class FacetQueryBuilder : GraphQlQueryBuilder<FacetQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "facetType" },
                new FieldMetadata { Name = "name" }
            };

        protected override string TypeName { get { return "Facet"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public FacetQueryBuilder WithFacetType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("facetType", alias, new GraphQlDirective[] { include, skip });
        }

        public FacetQueryBuilder ExceptFacetType()
        {
            return ExceptField("facetType");
        }

        public FacetQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public FacetQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public FacetQueryBuilder WithFilterFacetFragment(FilterFacetQueryBuilder filterFacetQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(filterFacetQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public FacetQueryBuilder WithRangeFacetFragment(RangeFacetQueryBuilder rangeFacetQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(rangeFacetQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public FacetQueryBuilder WithTermFacetFragment(TermFacetQueryBuilder termFacetQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(termFacetQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public class RangeFacetQueryBuilder : GraphQlQueryBuilder<RangeFacetQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "facetType" },
                new FieldMetadata { Name = "name" },
                new FieldMetadata { Name = "ranges", IsComplex = true, QueryBuilderType = typeof(FacetRangeTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "RangeFacet"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public RangeFacetQueryBuilder WithFacetType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("facetType", alias, new GraphQlDirective[] { include, skip });
        }

        public RangeFacetQueryBuilder ExceptFacetType()
        {
            return ExceptField("facetType");
        }

        public RangeFacetQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public RangeFacetQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public RangeFacetQueryBuilder WithRanges(FacetRangeTypeQueryBuilder facetRangeTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("ranges", alias, facetRangeTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public RangeFacetQueryBuilder ExceptRanges()
        {
            return ExceptField("ranges");
        }
    }

    public class FacetRangeTypeQueryBuilder : GraphQlQueryBuilder<FacetRangeTypeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "count", IsComplex = true },
                new FieldMetadata { Name = "from" },
                new FieldMetadata { Name = "fromStr" },
                new FieldMetadata { Name = "includeFrom" },
                new FieldMetadata { Name = "includeTo" },
                new FieldMetadata { Name = "max", IsComplex = true },
                new FieldMetadata { Name = "min", IsComplex = true },
                new FieldMetadata { Name = "to" },
                new FieldMetadata { Name = "toStr" },
                new FieldMetadata { Name = "total", IsComplex = true }
            };

        protected override string TypeName { get { return "FacetRangeType"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public FacetRangeTypeQueryBuilder WithCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("count", alias, new GraphQlDirective[] { include, skip });
        }

        public FacetRangeTypeQueryBuilder ExceptCount()
        {
            return ExceptField("count");
        }

        public FacetRangeTypeQueryBuilder WithFrom(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("from", alias, new GraphQlDirective[] { include, skip });
        }

        public FacetRangeTypeQueryBuilder ExceptFrom()
        {
            return ExceptField("from");
        }

        public FacetRangeTypeQueryBuilder WithFromStr(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("fromStr", alias, new GraphQlDirective[] { include, skip });
        }

        public FacetRangeTypeQueryBuilder ExceptFromStr()
        {
            return ExceptField("fromStr");
        }

        public FacetRangeTypeQueryBuilder WithIncludeFrom(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("includeFrom", alias, new GraphQlDirective[] { include, skip });
        }

        public FacetRangeTypeQueryBuilder ExceptIncludeFrom()
        {
            return ExceptField("includeFrom");
        }

        public FacetRangeTypeQueryBuilder WithIncludeTo(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("includeTo", alias, new GraphQlDirective[] { include, skip });
        }

        public FacetRangeTypeQueryBuilder ExceptIncludeTo()
        {
            return ExceptField("includeTo");
        }

        public FacetRangeTypeQueryBuilder WithMax(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("max", alias, new GraphQlDirective[] { include, skip });
        }

        public FacetRangeTypeQueryBuilder ExceptMax()
        {
            return ExceptField("max");
        }

        public FacetRangeTypeQueryBuilder WithMin(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("min", alias, new GraphQlDirective[] { include, skip });
        }

        public FacetRangeTypeQueryBuilder ExceptMin()
        {
            return ExceptField("min");
        }

        public FacetRangeTypeQueryBuilder WithTo(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("to", alias, new GraphQlDirective[] { include, skip });
        }

        public FacetRangeTypeQueryBuilder ExceptTo()
        {
            return ExceptField("to");
        }

        public FacetRangeTypeQueryBuilder WithToStr(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("toStr", alias, new GraphQlDirective[] { include, skip });
        }

        public FacetRangeTypeQueryBuilder ExceptToStr()
        {
            return ExceptField("toStr");
        }

        public FacetRangeTypeQueryBuilder WithTotal(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("total", alias, new GraphQlDirective[] { include, skip });
        }

        public FacetRangeTypeQueryBuilder ExceptTotal()
        {
            return ExceptField("total");
        }
    }

    public class TermFacetQueryBuilder : GraphQlQueryBuilder<TermFacetQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "facetType" },
                new FieldMetadata { Name = "name" },
                new FieldMetadata { Name = "terms", IsComplex = true, QueryBuilderType = typeof(FacetTermTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "TermFacet"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public TermFacetQueryBuilder WithFacetType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("facetType", alias, new GraphQlDirective[] { include, skip });
        }

        public TermFacetQueryBuilder ExceptFacetType()
        {
            return ExceptField("facetType");
        }

        public TermFacetQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public TermFacetQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public TermFacetQueryBuilder WithTerms(FacetTermTypeQueryBuilder facetTermTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("terms", alias, facetTermTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public TermFacetQueryBuilder ExceptTerms()
        {
            return ExceptField("terms");
        }
    }

    public class FacetTermTypeQueryBuilder : GraphQlQueryBuilder<FacetTermTypeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "count", IsComplex = true },
                new FieldMetadata { Name = "isSelected" },
                new FieldMetadata { Name = "term" }
            };

        protected override string TypeName { get { return "FacetTermType"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public FacetTermTypeQueryBuilder WithCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("count", alias, new GraphQlDirective[] { include, skip });
        }

        public FacetTermTypeQueryBuilder ExceptCount()
        {
            return ExceptField("count");
        }

        public FacetTermTypeQueryBuilder WithIsSelected(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isSelected", alias, new GraphQlDirective[] { include, skip });
        }

        public FacetTermTypeQueryBuilder ExceptIsSelected()
        {
            return ExceptField("isSelected");
        }

        public FacetTermTypeQueryBuilder WithTerm(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("term", alias, new GraphQlDirective[] { include, skip });
        }

        public FacetTermTypeQueryBuilder ExceptTerm()
        {
            return ExceptField("term");
        }
    }
    #endregion

    #region data classes
    public class Query
    {
        public CartType Cart { get; set; }
        public Product Product { get; set; }
        public ProductConnection Products { get; set; }
    }

    public class CartType
    {
        public ICollection<AddressType> Addresses { get; set; }
        public ICollection<PaymentMethodTypeDto> AvailablePaymentMethods { get; set; }
        public string ChannelId { get; set; }
        public string Comment { get; set; }
        public CopuponType Coupon { get; set; }
        public ICollection<CopuponType> Coupons { get; set; }
        public CurrencyType Currency { get; set; }
        public string CustomerId { get; set; }
        public string CustomerName { get; set; }
        public ICollection<DiscountType> Discounts { get; set; }
        public MoneyType DiscountTotal { get; set; }
        public MoneyType DiscountTotalWithTax { get; set; }
        public MoneyType ExtendedPriceTotal { get; set; }
        public MoneyType ExtendedPriceTotalWithTax { get; set; }
        public MoneyType HandlingTotal { get; set; }
        public MoneyType HandlingTotalWithTax { get; set; }
        public bool? HasPhysicalProducts { get; set; }
        public object Height { get; set; }
        public bool? IsAnonymous { get; set; }
        public bool? IsRecuring { get; set; }
        public bool? IsValid { get; set; }
        public ICollection<LineItemType> Items { get; set; }
        public int? ItemsCount { get; set; }
        public int? ItemsQuantity { get; set; }
        public object Length { get; set; }
        public string MeasureUnit { get; set; }
        public string Name { get; set; }
        public string ObjectType { get; set; }
        public string OrganizationId { get; set; }
        public ICollection<PaymentPlanType> PaymentPlan { get; set; }
        public MoneyType PaymentPrice { get; set; }
        public MoneyType PaymentPriceWithTax { get; set; }
        public ICollection<PaymentType> Payments { get; set; }
        public MoneyType PaymentTotal { get; set; }
        public MoneyType PaymentTotalWithTax { get; set; }
        public LineItemType RecentlyAddedItem { get; set; }
        public ICollection<ShipmentType> Shipments { get; set; }
        public MoneyType ShippingPrice { get; set; }
        public MoneyType ShippingPriceWithTax { get; set; }
        public MoneyType ShippingTotal { get; set; }
        public MoneyType ShippingTotalWithTax { get; set; }
        public string Status { get; set; }
        public string StoreId { get; set; }
        public MoneyType SubTotal { get; set; }
        public MoneyType SubTotalWithTax { get; set; }
        public ICollection<TaxDetailType> TaxDetails { get; set; }
        public object TaxPercentRate { get; set; }
        public MoneyType TaxTotal { get; set; }
        public string TaxType { get; set; }
        public MoneyType Total { get; set; }
        public string Type { get; set; }
        public ICollection<ValidationErrorType> ValidationErrors { get; set; }
        public object VolumetricWeight { get; set; }
        public object Weight { get; set; }
        public string WeightUnit { get; set; }
        public object Width { get; set; }
    }

    public class MoneyType
    {
        public object Amount { get; set; }
        public int? DecimalDigits { get; set; }
        public string FormattedAmount { get; set; }
        public string FormattedAmountWithoutCurrency { get; set; }
        public string FormattedAmountWithoutPoint { get; set; }
        public string FormattedAmountWithoutPointAndCurrency { get; set; }
    }

    public class CurrencyType
    {
        public string Code { get; set; }
        public string CultureName { get; set; }
        public string CustomFormatting { get; set; }
        public string EnglishName { get; set; }
        public object ExchangeRate { get; set; }
        public string Symbol { get; set; }
    }

    public class TaxDetailType
    {
        public MoneyType Amount { get; set; }
        public MoneyType Name { get; set; }
        public MoneyType Price { get; set; }
        public MoneyType Rate { get; set; }
    }

    public class ShipmentType
    {
        public CurrencyType Currency { get; set; }
        public AddressType DeliveryAddress { get; set; }
        public MoneyType DiscountAmount { get; set; }
        public MoneyType DiscountAmountWithTax { get; set; }
        public ICollection<DiscountType> Discounts { get; set; }
        public string FulfillmentCenterId { get; set; }
        public decimal? Height { get; set; }
        public bool? IsValid { get; set; }
        public ICollection<CartShipmentItemType> Items { get; set; }
        public decimal? Length { get; set; }
        public string MeasureUnit { get; set; }
        public MoneyType Price { get; set; }
        public MoneyType PriceWithTax { get; set; }
        public string ShipmentMethodCode { get; set; }
        public string ShipmentMethodOption { get; set; }
        public ICollection<TaxDetailType> TaxDetails { get; set; }
        public object TaxPercentRate { get; set; }
        public MoneyType TaxTotal { get; set; }
        public string TaxType { get; set; }
        public MoneyType Total { get; set; }
        public MoneyType TotalWithTax { get; set; }
        public ICollection<ValidationErrorType> ValidationErrors { get; set; }
        public object VolumetricWeight { get; set; }
        public decimal? Weight { get; set; }
        public string WeightUnit { get; set; }
        public decimal? Width { get; set; }
    }

    public class AddressType
    {
        public string City { get; set; }
        public string CountryCode { get; set; }
        public string CountryName { get; set; }
        public string Email { get; set; }
        public string FirstName { get; set; }
        public string Key { get; set; }
        public string LastName { get; set; }
        public string Line1 { get; set; }
        public string Line2 { get; set; }
        public string MiddleName { get; set; }
        public string Name { get; set; }
        public string Organization { get; set; }
        public string Phone { get; set; }
        public string PostalCode { get; set; }
        public string RegionId { get; set; }
        public string RegionName { get; set; }
        public string Zip { get; set; }
    }

    public class CartShipmentItemType
    {
        public LineItemType LineItem { get; set; }
        public int? Quantity { get; set; }
    }

    public class LineItemType
    {
        public string CatalogId { get; set; }
        public string CategoryId { get; set; }
        public string Comment { get; set; }
        public object CreatedDate { get; set; }
        public MoneyType DiscountAmount { get; set; }
        public MoneyType DiscountAmountWithTax { get; set; }
        public MoneyType DiscountTotal { get; set; }
        public MoneyType DiscountTotalWithTax { get; set; }
        public MoneyType ExtendedPrice { get; set; }
        public MoneyType ExtendedPriceWithTax { get; set; }
        public object Height { get; set; }
        public string ImageUrl { get; set; }
        public int? InStockQuantity { get; set; }
        public bool? IsGift { get; set; }
        public bool? IsReadOnly { get; set; }
        public bool? IsReccuring { get; set; }
        public bool? IsValid { get; set; }
        public string LanguageCode { get; set; }
        public object Length { get; set; }
        public MoneyType ListPrice { get; set; }
        public MoneyType ListPriceWithTax { get; set; }
        public string MeasureUnit { get; set; }
        public string Name { get; set; }
        public string ObjectType { get; set; }
        public MoneyType PaymentPlan { get; set; }
        public MoneyType PlacedPrice { get; set; }
        public MoneyType PlacedPriceWithTax { get; set; }
        public Product Product { get; set; }
        public string ProductId { get; set; }
        public string ProductType { get; set; }
        public int? Quantity { get; set; }
        public bool? RequiredShipping { get; set; }
        public MoneyType SalePrice { get; set; }
        public MoneyType SalePriceWithTax { get; set; }
        public string ShipmentMethodCode { get; set; }
        public string Sku { get; set; }
        public ICollection<TaxDetailType> TaxDetails { get; set; }
        public object TaxPercentRate { get; set; }
        public MoneyType TaxTotal { get; set; }
        public string TaxType { get; set; }
        public string ThumbnailImageUrl { get; set; }
        public ValidationErrorType ValidationErrors { get; set; }
        public object VolumetricWeight { get; set; }
        public string WarehouseLocation { get; set; }
        public object Weight { get; set; }
        public string WeightUnit { get; set; }
        public object Width { get; set; }
    }

    public class Product
    {
        public ProductAssociationConnection Associations { get; set; }
        public string Code { get; set; }
        public string Id { get; set; }
        public string ImgSrc { get; set; }
        public string Name { get; set; }
        public string OuterId { get; set; }
        public ICollection<PriceType> Prices { get; set; }
        public string ProductType { get; set; }
        public ICollection<Property> Properties { get; set; }
    }

    public class Property
    {
        public string Id { get; set; }
        public string Name { get; set; }
        public PropertyType? Type { get; set; }
        public ICollection<string> Values { get; set; }
    }

    public class PriceType
    {
        public string Currency { get; set; }
        public object EndDate { get; set; }
        public object List { get; set; }
        public int? MinQuantity { get; set; }
        public string PricelistId { get; set; }
        public object Sale { get; set; }
        public object StartDate { get; set; }
    }

    public class ProductAssociationConnection
    {
        public ICollection<ProductAssociationEdge> Edges { get; set; }
        public ICollection<ProductAssociation> Items { get; set; }
        public PageInfo PageInfo { get; set; }
        public int? TotalCount { get; set; }
    }

    public class PageInfo
    {
        public string EndCursor { get; set; }
        public bool? HasNextPage { get; set; }
        public bool? HasPreviousPage { get; set; }
        public string StartCursor { get; set; }
    }

    public class ProductAssociationEdge
    {
        public string Cursor { get; set; }
        public ProductAssociation Node { get; set; }
    }

    public class ProductAssociation
    {
        public string AssociatedObjectId { get; set; }
        public string AssociatedObjectType { get; set; }
        public int? Priority { get; set; }
        public Product Product { get; set; }
        public int? Quantity { get; set; }
        public string Type { get; set; }
    }

    public class ValidationErrorType
    {
        public string ErrorCode { get; set; }
    }

    public class DiscountType
    {
        public MoneyType Amount { get; set; }
        public string Coupon { get; set; }
        public string Description { get; set; }
        public string PromotionId { get; set; }
    }

    public class PaymentType
    {
        public MoneyType Amount { get; set; }
        public AddressType BillingAddress { get; set; }
        public CurrencyType Currency { get; set; }
        public MoneyType DiscountAmount { get; set; }
        public MoneyType DiscountAmountWithTax { get; set; }
        public ICollection<DiscountType> Discounts { get; set; }
        public string OuterId { get; set; }
        public string PaymentGatewayCode { get; set; }
        public MoneyType Price { get; set; }
        public MoneyType PriceWithTax { get; set; }
        public ICollection<TaxDetailType> TaxDetails { get; set; }
        public object TaxPercentRate { get; set; }
        public MoneyType TaxTotal { get; set; }
        public string TaxType { get; set; }
        public MoneyType Total { get; set; }
        public MoneyType TotalWithTax { get; set; }
    }

    public class PaymentMethodTypeDto
    {
        public string Code { get; set; }
        public CurrencyType Currency { get; set; }
        public string Description { get; set; }
        public MoneyType DiscountAmount { get; set; }
        public MoneyType DiscountAmountWithTax { get; set; }
        public ICollection<DiscountType> Discounts { get; set; }
        public bool? IsAvailableForPartial { get; set; }
        public string LogoUrl { get; set; }
        public string PaymentMethodGroupType { get; set; }
        public string PaymentMethodType { get; set; }
        public MoneyType Price { get; set; }
        public MoneyType PriceWithTax { get; set; }
        public int? Priority { get; set; }
        public ICollection<SettingType> Settings { get; set; }
        public ICollection<TaxDetailType> TaxDetails { get; set; }
        public object TaxPercentRate { get; set; }
        public MoneyType TaxTotal { get; set; }
        public string TaxType { get; set; }
        public MoneyType Total { get; set; }
        public MoneyType TotalWithTax { get; set; }
    }

    public class SettingType
    {
        public string Name { get; set; }
        public Query Value { get; set; }
        public string ValueType { get; set; }
    }

    public class PaymentPlanType
    {
    }

    public class CopuponType
    {
        public bool? AppliedSuccessfully { get; set; }
        public string Code { get; set; }
        public string Description { get; set; }
        public string ErrorCode { get; set; }
    }

    public class ProductConnection
    {
        public ICollection<ProductEdge> Edges { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("filter_facets")]
#endif
        public ICollection<FilterFacet> FilterFacets { get; set; }
        public ICollection<Product> Items { get; set; }
        public PageInfo PageInfo { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("range_facets")]
#endif
        public ICollection<RangeFacet> RangeFacets { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("term_facets")]
#endif
        public ICollection<TermFacet> TermFacets { get; set; }
        public int? TotalCount { get; set; }
    }

    public class ProductEdge
    {
        public string Cursor { get; set; }
        public Product Node { get; set; }
    }

    public class FilterFacet : IFacet
    {
        public int? Count { get; set; }
        public FacetTypes? FacetType { get; set; }
        public string Name { get; set; }
    }

    public interface IFacet
    {
        FacetTypes? FacetType { get; set; }
        string Name { get; set; }
    }

    public class Facet : IFacet
    {
        public FacetTypes? FacetType { get; set; }
        public string Name { get; set; }
    }

    public class RangeFacet : IFacet
    {
        public FacetTypes? FacetType { get; set; }
        public string Name { get; set; }
        public ICollection<FacetRangeType> Ranges { get; set; }
    }

    public class FacetRangeType
    {
        public object Count { get; set; }
        public DateTimeOffset? From { get; set; }
        public string FromStr { get; set; }
        public bool? IncludeFrom { get; set; }
        public bool? IncludeTo { get; set; }
        public object Max { get; set; }
        public object Min { get; set; }
        public DateTimeOffset? To { get; set; }
        public string ToStr { get; set; }
        public object Total { get; set; }
    }

    public class TermFacet : IFacet
    {
        public FacetTypes? FacetType { get; set; }
        public string Name { get; set; }
        public ICollection<FacetTermType> Terms { get; set; }
    }

    public class FacetTermType
    {
        public object Count { get; set; }
        public bool? IsSelected { get; set; }
        public string Term { get; set; }
    }
    #endregion
}
